一、Spring 概述
（1）DI依赖注入

（2）IoC控制反转

（3）AOP面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护。允许定义方法拦截器和切入点对代码进行干净地解耦。

（4）POJO有一些private属性及其getter setter方法，没有业务逻辑的类

二、Spring 体系结构
（1）核心容器，由核心，Bean，上下文和表达式语言模块组成，细节如下：

核心模块提供了框架的基本组成，包括 IoC 和依赖注入。

Bean模块提供BeanFactory。

上下文模块建立在核心和 Bean 模块基础上，是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。

表达式语言模块。

（2）数据访问/集成
（3）Web

三、Spring 环境配置
四、Spring Hello World 实例

五、Spring IoC 容器
Spring 提供两种容器，BeanFactory 容器和ApplicationContext 容器。
BeanFactory 容器是最简单的容器，给 DI 提供基本的支持。
ApplicationContext 容器添加更多企业特定的功能，且包括 BeanFactory 容器的所有功能

五（一）、Spring BeanFactory 容器
最常使用的实现了BeanFactory 接口的类是 XmlBeanFactory 类。
XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource("Beans.xml"));

五（二）、Spring ApplicationContext 容器
最常使用的实现了BeanFactory 接口的类是：
（1）FileSystemXmlApplicationContext：该类从XML文件中加载已定义的bean。需要提供给构造器 XML 文件的完整路径

（2）ClassPathXmlApplicationContext：该类从XML文件中加载已定义的bean。不需要提供给构造器 XML 文件的完整路径，需要配置CLASSPATH环境变量，该类会从CLASSPATH环境变量中搜索XML文件。

（3）WebXmlApplicationContext：该类在一个web应用程序的范围内从XML文件中加载已定义的bean。

五（三）、Spring Bean 定义
bean定义包含配置元数据，包括class，id，name，scope，constructor-arg，property，autowire，lazy-init，init-method，destroy-method

以下三个方法把配置元数据提供给 Spring 容器：
基于 XML 的配置文件
基于注解的配置
基于 Java 的配置

五（四）、Spring Bean 作用域
singleton单例并存储高速缓存中（默认）
prototype每次创建新的实例
request  HTTP请求
session  HTTP会话
global-session   全局HTTP会话

五（五）、Spring Bean 生命周期
（1）初始化回调
init-method（建议使用）
实现InitializingBean接口的afterPropertiesSet方法

（2）销毁回调
destroy-method（建议使用）
实现DisposableBean接口的destroy方法

AbstractApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");
context.registerShutdownHook();触发销毁回调

（3）在<beans>默认的初始化方法是default-init-method，默认的销毁方法是default-destroy-method

五（六）、Spring Bean 后置处理器
ApplicationContext会自动检测BeanPostProcessor接口的实现类

<bean class="Test" />

public class Test implements BeanPostProcessor {
   public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
      return bean;
   }
   public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
      return bean;
   }
}

五（七）、Spring Bean 定义继承
<bean id="" class="" parent="父bean的id">

六、Spring 依赖注入





























