https://umijs.org/zh-CN/docs

（一）介绍
（二）Umi 如何工作？
（三）快速上手
（四）目录结构
（1）基础Umi项目目录结构
.
├── package.json
├── .umirc.ts                 配置内置功能和插件
├── .env                      环境变量
├── dist                      存放打包文件
├── mock                      存放mock文件
├── public                    该目录下所有文件会被复制到dist
└── src
    ├── .umi                  存放临时文件
    ├── layouts/index.tsx     约定式路由时的全局布局文件
    ├── pages                 存放路由组件
        ├── index.less
        └── index.tsx
    └── app.ts                配置运行时

（五）配置
（1）配置文件
可以写在.umirc.ts，也可以写在config/config.ts，.umirc.ts优先级更高，更推荐
（2）TypeScript 提示
（3）本地临时配置
（3.1）.umirc.ts会和.umirc.local.ts做 deep merge
（3.2）config/config.ts会和config/config.local.ts做 deep merge
（3.3）.local.ts优先级最高，比UMI_ENV的配置更高。umi dev时有效。umi build 时无效。应添加到 .gitignore

（4）多环境多份配置
可以通过环境变量UMI_ENV区分环境指定配置。

（六）运行时配置
（1）运行时配置和配置的区别是他跑在浏览器端。
（2）配置项
（2.1）patchRoutes修改路由，不需要返回
export function patchRoutes({ routes }) {
}

（2.2）render覆写render
export function render(oldRender) {
}

（2.3）onRouteChange初始加载和路由切换时使用
export function onRouteChange({ routes, matchedRoutes, location, action }) {
}

（2.4）rootContainer修改交给react-dom渲染的根组件
export function rootContainer(lastRootContainer, args) {
	return 
}
args包含：
routes，路由
plugin，运行时插件
history，history实例

（七）路由
（1）配置路由
（1.1）配置文件中通过routes进行配置，包括：
（1.2）path
（1.3）component
路径可以是绝对路径
路径也可以是相对路径，从src/pages开始找，若指向src目录，可以使用../也可以使用@/推荐后者
（1.4）exact默认false
（1.5）routes配置子路由，通过 props.children 渲染子路由
（1.6）redirect重定向
（1.7）wrappers配置高阶组件，通过 props.children 渲染子路由
（1.8）wrappers配置标题

（2）页面跳转
import { history } from 'umi';
history.push('/list');

history.push('/list?a=b');
history.push({
  pathname: '/list',
  query: {
    a: 'b',
  },
});

history.goBack();


（3）hash 路由
（4）Link 组件
（4.1）<Link to="/">点击跳转到/</Link> 
（4.2）Link用于单页应用内部跳转，a标签用于外部地址跳转

（5）路由组件参数
路由组件可通过props获取以下属性
（5.1）match，包含params、path、url 和 isExact
（5.2）location
（5.3）history
（5.4）route

（6）传递参数给子路由



（八）约定式路由（从这里开始，这节目前完全没整理）






























































































































