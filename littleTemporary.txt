浏览器进程线程及fiber及对reac生命周期的影响
（1）看到：事件循环进阶：macrotask与microtask
https://segmentfault.com/a/1190000012925872
（2）
https://segmentfault.com/a/1190000018250127
（3）
https://segmentfault.com/a/1190000020035950
https://www.jianshu.com/p/0d9f558959c3

（1.1）
进程是cpu资源分配的最小单位
线程是cpu调度的最小单位

（1.2）浏览器包含的进程
（1.2.1）Browser进程：主进程，只有一个，作用：
（a）界面显示，与用户交互，如前进，后退等
（b）每个Tab页的管理，创建和销毁其他进程
（c）将Renderer进程得到的内存中的Bitmap，绘制到界面
（d）网络资源的管理，下载等
（1.2.2）第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建
（1.2.3）GPU进程：最多一个，用于3D绘制等
（1.2.4）Renderer进程：渲染进程，浏览器内核，默认每个Tab页一个Renderer进程，互不影响，内部多线程，作用：
（a）页面渲染，js执行，事件循环等
（1.2.5）SharedWorker进程
（a）所有Tab页共享，所有Renderer进程共享

（1.3）浏览器有时会将多个进程合并。比如打开多个空白Tab页，浏览器会将多个空白Tab页合并成一个进程

（1.4）浏览器多进程优势
（1.4.1）避免单个page crash影响整个浏览器
（1.4.2）避免第三方插件crash影响整个浏览器
（1.4.3）多进程充分利用多核优势
（1.4.4）方便使用沙盒模型隔离插件等进程，提高浏览器稳定性

（1.5）Renderer进程包含的线程：

（1.5.1）GUI渲染线程
（a）页面渲染，解析html，css，构建dom树、style树、render树，布局和绘制等。
（b）Repaint、reflow
（c）GUI渲染线程与JS引擎线程是互斥的，GUI渲染被保存在一个队列中等到JS引擎空闲时被立即执行。如果JS引擎执行时间过长，GUI渲染阻塞，fiber解决此问题。

（1.5.2）JS引擎线程
（a）即JS内核，如V8引擎
（b）解析Javascript，运行代码。
（c）一直等待任务队列中任务到来，加以处理

（1.5.3）事件触发线程
（a）控制事件循环（JS引擎线程忙不过来，需另开线程协助）
（b）当JS引擎执行代码块如setTimeOut（也可来自Renderer进程的其他线程，如鼠标点击、AJAX异步请求等），会将对应事件添加到事件触发线程中
（c）当对应事件符合触发条件被触发时，事件触发线程会把对应事件添加到任务队列的队尾，等待JS引擎空闲时加以处理

（1.5.4）定时触发器线程
（a）setInterval与setTimeout计时
（b）W3C在HTML标准中规定setTimeout低于4ms的时间间隔算为4ms。

（1.5.5）异步http请求线程
（a）XMLHttpRequest在连接后新开一个线程请求


（1.6）GUI渲染线程与JS引擎线程是互斥的原因
js可操作dom元素，如果js操作dom元素同时渲染界面，那么渲染结果不可预期

（1.7）WebWorker
（1.7.1）JS引擎线程的子线程，完全受JS引擎线程控制，且不能操作DOM
（1.7.2）JS引擎线程与WebWorker线程通过postMessage序列化对象通信

（1.8）Renderer进程页面渲染过程
图片

（1.9）setTimeout不能准时执行原因：（1）事件触发线程将其添加到任务队列的队尾，队列前面还有事件未被执行（2）JS引擎未空闲

（1.10）setInterval
（1.10.1）事件触发线程每次隔精确时间将其添加到任务队列的队尾
（1.10.2）累计效应，如果下次setInterval任务已到，本次setInterval任务还没有执行完，就会导致两次任务没有间隔连续执行。
（1.10.3）就算正常间隔执行，两次setInterval任务间隔可能比预期小，因为任务执行需要一段时间
（1.10.4）浏览器最小化时，事件触发线程每次隔精确时间将其添加到任务队列的队尾，浏览器再次打开时，一瞬间全部执行




























































































































































































































