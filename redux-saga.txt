（一）自述
（1）
redux-saga是一个redux中间件，管理副作用

（二）初级教程
（1）
yield delay(1000)返回Promise
yield call(delay, 1000)返回plain Object

（2）
export function* needTest() {
  yield call(delay, 1000)
  yield put({ type: 'TYPENAME' })
}

import test from 'tape';
test('needTest Saga test', (assert) => {
  const gen = needTest()

  assert.deepEqual(
    gen.next().value,
    call(delay, 1000),
    'description'
  )

  assert.deepEqual(
    gen.next().value,
    put({type: 'TYPENAME'}),
    'description'
  )

  assert.deepEqual(
    gen.next(),
    { done: true, value: undefined },
    'description'
  )

  assert.end()
});

（三）Saga 概念的背景
（四）使用 Saga Helpers
（1）takeEvery 
yield takeEvery('TYPENAME', otherReduxSagaFunction)
（2）takeLatest 
yield takeLatest('TYPENAME', otherReduxSagaFunction)

（五）声明式 Effects
yield call(fn, ...args)
yield apply(fn, [...args])
yield call([obj, obj.method], ...args)
yield apply(obj, obj.method, [...args])
注：call和appl作用相同，改变this指向。
function add(c, d){ 
    return this.a + this.b + c + d; 
} 
var objectWithoutAdd = {a:1, b:2}; 
add.call(objectWithoutAdd, 3, 4); // 1 + 2 + 3 + 4 = 10
add.apply(objectWithoutAdd, [3, 4]); // 1 + 2 + 3 + 4 = 10

（六）dispatch action
put
（七）错误处理
（1.1）try catch
function* fetchFunction() {
  try {
    const fetchData = yield call(fetchApi, 'fetchUrl')
    yield put({ type: 'fetchSuccess', fetchData })
  }
  catch(error) {
    yield put({ type: 'fetchFailed', error })
  }
}
（1.2）测试
const iterator = fetchFunction()

assert.deepEqual(
  iterator.next().value,
  call(fetchApi, 'fetchUrl'),
  'description'
)

const error = {}
assert.deepEqual(
  iterator.throw(error).value,
  yield put({ type: 'fetchFailed', error }),
  'description'
)
（2）错误标识
function* fetchFunction() {
	const { fetchData, error } = yield call(fetchApi, 'fetchUrl')
	if (fetchData){
		yield put({ type: 'fetchSuccess', fetchData })
	}else{
		yield put({ type: 'fetchFailed', error })
	}
}

（八）一个常见的抽象概念: Effect（从这里开始，这节目前完全没整理）















































































































