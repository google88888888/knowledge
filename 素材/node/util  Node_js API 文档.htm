<!DOCTYPE HTML>
<!-- saved from url=(0030)http://nodejs.cn/api/util.html -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="zh-cmn-Hans"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
   
<META charset="utf-8">   <TITLE>util | Node.js API 文档</TITLE>   <LINK href="util%20%20Node_js%20API%20文档_files/api.css" 
rel="stylesheet">   <LINK href="/static/favicon.png" rel="icon" type="image/png" 
sizes="32x32"> 
<META name="GENERATOR" content="MSHTML 11.00.9600.18639"></HEAD> 
<BODY class="alt apidoc" id="api-section-util">
<DIV class="clearfix" id="content">
<DIV class="interior" id="column2">
<DIV class="interior" id="intro"><A href="http://nodejs.cn/">          Node.js 
中文网         </A>         
<DIV><INPUT id="search_input" placeholder="API 快速搜索" value="">         
</DIV></DIV>
<UL>
  <LI><A class="nav-documentation" href="http://nodejs.cn/api/documentation.html">关于本文档</A></LI>
  <LI><A class="nav-synopsis" 
  href="http://nodejs.cn/api/synopsis.html">用法与例子</A></LI></UL>
<DIV class="line"></DIV>
<UL>
  <LI><A class="nav-assert" href="http://nodejs.cn/api/assert.html">Assert 
  (断言)</A></LI>
  <LI><A class="nav-buffer" 
  href="http://nodejs.cn/api/buffer.html">Buffer</A></LI>
  <LI><A class="nav-addons" href="http://nodejs.cn/api/addons.html">C/C++ 
  插件</A></LI>
  <LI><A class="nav-child_process" href="http://nodejs.cn/api/child_process.html">Child 
  Processes (子进程)</A></LI>
  <LI><A class="nav-cluster" href="http://nodejs.cn/api/cluster.html">Cluster 
  (集群)</A></LI>
  <LI><A class="nav-cli" href="http://nodejs.cn/api/cli.html">CLI 
  (命令行选项)</A></LI>
  <LI><A class="nav-console" href="http://nodejs.cn/api/console.html">Console 
  (控制台)</A></LI>
  <LI><A class="nav-crypto" href="http://nodejs.cn/api/crypto.html">Crypto 
  (加密)</A></LI>
  <LI><A class="nav-debugger" href="http://nodejs.cn/api/debugger.html">Debugger 
  (调试器)</A></LI>
  <LI><A class="nav-dns" href="http://nodejs.cn/api/dns.html">DNS 
  (域名服务器)</A></LI>
  <LI><A class="nav-domain" href="http://nodejs.cn/api/domain.html">Domain 
  (域)</A></LI>
  <LI><A class="nav-errors" href="http://nodejs.cn/api/errors.html">Error 
  (错误)</A></LI>
  <LI><A class="nav-events" href="http://nodejs.cn/api/events.html">Events 
  (事件)</A></LI>
  <LI><A class="nav-fs" href="http://nodejs.cn/api/fs.html">File System 
  (文件系统)</A></LI>
  <LI><A class="nav-globals" href="http://nodejs.cn/api/globals.html">Global 
  (全局变量)</A></LI>
  <LI><A class="nav-http" href="http://nodejs.cn/api/http.html">HTTP</A></LI>
  <LI><A class="nav-https" href="http://nodejs.cn/api/https.html">HTTPS</A></LI>
  <LI><A class="nav-modules" href="http://nodejs.cn/api/modules.html">Module 
  (模块)</A></LI>
  <LI><A class="nav-net" href="http://nodejs.cn/api/net.html">Net (网络)</A></LI>
  <LI><A class="nav-os" href="http://nodejs.cn/api/os.html">OS (操作系统)</A></LI>
  <LI><A class="nav-path" href="http://nodejs.cn/api/path.html">Path 
  (路径)</A></LI>
  <LI><A class="nav-process" href="http://nodejs.cn/api/process.html">Process 
  (进程)</A></LI>
  <LI><A class="nav-punycode" 
  href="http://nodejs.cn/api/punycode.html">Punycode</A></LI>
  <LI><A class="nav-querystring" 
  href="http://nodejs.cn/api/querystring.html">Query Strings (查询字符串)</A></LI>
  <LI><A class="nav-readline" href="http://nodejs.cn/api/readline.html">Readline 
  (逐行读取)</A></LI>
  <LI><A class="nav-repl" href="http://nodejs.cn/api/repl.html">REPL 
  (交互式解释器)</A></LI>
  <LI><A class="nav-stream" href="http://nodejs.cn/api/stream.html">Stream 
  (流)</A></LI>
  <LI><A class="nav-string_decoder" href="http://nodejs.cn/api/string_decoder.html">String 
  Decoder (字符串解码器)</A></LI>
  <LI><A class="nav-timers" href="http://nodejs.cn/api/timers.html">Timer 
  (定时器)</A></LI>
  <LI><A class="nav-tls" href="http://nodejs.cn/api/tls.html">TLS 
  (安全传输层)</A></LI>
  <LI><A class="nav-tty" href="http://nodejs.cn/api/tty.html">TTY (终端)</A></LI>
  <LI><A class="nav-dgram" href="http://nodejs.cn/api/dgram.html">UDP/Datagram 
  (数据报)</A></LI>
  <LI><A class="nav-url" href="http://nodejs.cn/api/url.html">URL</A></LI>
  <LI><A class="nav-util active" href="http://nodejs.cn/api/util.html">Util 
  (实用工具)</A></LI>
  <LI><A class="nav-v8" href="http://nodejs.cn/api/v8.html">V8</A></LI>
  <LI><A class="nav-vm" href="http://nodejs.cn/api/vm.html">VM (虚拟机)</A></LI>
  <LI><A class="nav-zlib" href="http://nodejs.cn/api/zlib.html">ZLIB 
  (压缩)</A></LI></UL>
<DIV class="line"></DIV></DIV>
<DIV class="interior" id="column1" data-id="util"><HEADER>
<H1>Node.js v6.10.3 文档</H1>
<DIV id="gtoc">
<P><A name="toc" href="http://nodejs.cn/api/">返回文档首页</A>             <!--<a href="/api/all.html">单页面显示</a> |--> 
            <!--<a href="/api/util.json">JSON格式</a> |-->             <!--<a href="/api/en/util.html">查看英文版</a>--> 
          </P></DIV>
<HR>
</HEADER>
<DIV id="toc">
<H2>目录</H2>
<UL>
  <LI><SPAN class="stability_2"><A href="http://nodejs.cn/api/util.html#util_util">util 
  (实用工具)</A></SPAN>
  <UL> 
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_debuglog_section">util.debuglog(section)</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_deprecate_function_string">util.deprecate(function, 
    string)</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_format_format_args">util.format(format[, 
    ...args])</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_inherits_constructor_superconstructor">util.inherits(constructor, 
    superConstructor)</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_inspect_object_options">util.inspect(object[, 
    options])</A></SPAN>
    <UL> 
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_customizing_util_inspect_colors">自定义 
      <CODE>util.inspect</CODE> 颜色</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_custom_inspection_functions_on_objects">自定义对象的查看函数</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_inspect_defaultoptions">util.inspect.defaultOptions</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_util_inspect_custom">util.inspect.custom</A></SPAN></LI></UL></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/util.html#util_deprecated_apis">废弃的 
    API</A></SPAN>
    <UL> 
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_debug_string">util.debug(string)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_error_strings">util.error([...strings])</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isarray_object">util.isArray(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isboolean_object">util.isBoolean(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isbuffer_object">util.isBuffer(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isdate_object">util.isDate(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_iserror_object">util.isError(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isfunction_object">util.isFunction(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isnull_object">util.isNull(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isnullorundefined_object">util.isNullOrUndefined(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isnumber_object">util.isNumber(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isobject_object">util.isObject(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isprimitive_object">util.isPrimitive(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isregexp_object">util.isRegExp(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isstring_object">util.isString(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_issymbol_object">util.isSymbol(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_isundefined_object">util.isUndefined(object)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_log_string">util.log(string)</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_print_strings">util.print([...strings])</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_puts_strings">util.puts([...strings])</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/util.html#util_util_extend_target_source">util._extend(target, 
      source)</A></SPAN></LI></UL></LI></UL></LI></UL></DIV>
<DIV id="apicontent">
<H1>util (实用工具)<SPAN><A class="mark" id="util_util" href="http://nodejs.cn/api/util.html#util_util">#</A></SPAN></H1>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<PRE class="api_stability api_stability_2"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 2</A> - 稳定的</PRE>
<P><CODE>util</CODE> 模块主要用于支持 Node.js 内部 API 的需求。 大部分实用工具也可用于应用程序与模块开发者。
 它可以通过以下方式使用：</P>
<PRE><CODE class="lang-js">const util = require('util');
</CODE></PRE>
<H2>util.debuglog(section)<SPAN><A class="mark" id="util_util_debuglog_section" 
href="http://nodejs.cn/api/util.html#util_util_debuglog_section">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_debuglog_section">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_debuglog_section.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.3</SPAN> </DIV>
<UL>
  <LI><CODE>section</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  一个字符串，指定要为应用的哪些部分创建 <CODE>debuglog</CODE> 函数。 <CODE>debuglog</CODE> 
  函数要为哪些应用创建。</LI>
  <LI>返回: <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">&lt;Function&gt;</A> 
  日志函数</LI></UL>
<P><CODE>util.debuglog()</CODE> 方法用于创建一个函数，基于 <CODE>NODE_DEBUG</CODE> 
环境变量的存在与否有条件地写入调试信息到 <CODE>stderr</CODE>。 如果 <CODE>section</CODE> 
名称在环境变量的值中，则返回的函数类似于 <A href="http://nodejs.cn/api/console.html#console_console_error_data_args"><CODE>console.error()</CODE></A>。
 否则，返回的函数是一个空操作。</P>
<P>例子：</P>
<PRE><CODE class="lang-js">const util = require('util');
const debuglog = util.debuglog('foo');

debuglog('hello from foo [%d]', 123);
</CODE></PRE>
<P>如果程序在环境中运行时带上 <CODE>NODE_DEBUG=foo</CODE>，则输出类似如下： </P>
<PRE><CODE class="lang-txt">FOO 3245: hello from foo [123]
</CODE></PRE>
<P>其中 <CODE>3245</CODE> 是进程 id。 如果运行时没带上环境变量集合，则不会打印任何东西。</P>
<P><CODE>NODE_DEBUG</CODE> 环境变量中可指定多个由逗号分隔的 <CODE>section</CODE> 名称。
 例如：<CODE>NODE_DEBUG=fs,net,tls</CODE>。</P>
<H2>util.deprecate(function, string)<SPAN><A class="mark" id="util_util_deprecate_function_string" 
href="http://nodejs.cn/api/util.html#util_util_deprecate_function_string">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_deprecate_function_string">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_deprecate_function_string.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.8.0</SPAN> </DIV>
<P><CODE>util.deprecate()</CODE> 方法会包装给定的 <CODE>function</CODE> 或类，并标记为废弃的。</P>
<PRE><CODE class="lang-js">const util = require('util');

exports.puts = util.deprecate(function() {
  for (var i = 0, len = arguments.length; i &lt; len; ++i) {
    process.stdout.write(arguments[i] + '\n');
  }
}, 'util.puts: 使用 console.log 代替');
</CODE></PRE>
<P>当被调用时，<CODE>util.deprecate()</CODE> 会返回一个函数，这个函数会使用 
<CODE>process.on('warning')</CODE> 事件触发一个 <CODE>DeprecationWarning</CODE>。
 默认情况下，警告只在首次被调用时才会被触发并打印到 <CODE>stderr</CODE>。 警告被触发之后，被包装的 
<CODE>function</CODE> 会被调用。</P>
<P>如果使用了 <CODE>--no-deprecation</CODE> 或 <CODE>--no-warnings</CODE> 命令行标记，或 
<CODE>process.noDeprecation</CODE> 属性在首次废弃警告之前被设为 <CODE>true</CODE>，则 
<CODE>util.deprecate()</CODE> 方法什么也不做。</P>
<P>如果设置了 <CODE>--trace-deprecation</CODE> 或 <CODE>--trace-warnings</CODE> 
命令行标记，或 <CODE>process.traceDeprecation</CODE> 属性被设为 
<CODE>true</CODE>，则废弃的函数首次被调用时会把警告与堆栈追踪打印到 <CODE>stderr</CODE>。</P>
<P>如果设置了 <CODE>--throw-deprecation</CODE> 命令行标记，或 
<CODE>process.throwDeprecation</CODE> 属性被设为 
<CODE>true</CODE>，则当废弃的函数被调用时会抛出一个异常。</P>
<P><CODE>--throw-deprecation</CODE> 命令行标记和 <CODE>process.throwDeprecation</CODE> 
属性优先于 <CODE>--trace-deprecation</CODE> 和 
<CODE>process.traceDeprecation</CODE>。</P>
<H2>util.format(format[, ...args])<SPAN><A class="mark" id="util_util_format_format_args" 
href="http://nodejs.cn/api/util.html#util_util_format_format_args">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_format_format_args">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_format_format_args.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.5.3</SPAN> </DIV>
<UL>
  <LI><CODE>format</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  一个类似 <CODE>printf</CODE> 的格式字符串。</LI></UL>
<P><CODE>util.format()</CODE> 方法返回一个格式化后的字符串，使用第一个参数作为一个类似 <CODE>printf</CODE> 
的格式。</P>
<P>第一个参数是一个字符串，包含零个或多个占位符。 每个占位符会被对应参数转换后的值所替换。 支持的占位符有：</P>
<UL>
  <LI><CODE>%s</CODE> - 字符串。</LI>
  <LI><CODE>%d</CODE> - 数值（包括整数和浮点数）。</LI>
  <LI><CODE>%j</CODE> - JSON。如果参数包含循环引用，则用字符串 <CODE>'[Circular]'</CODE> 替换。</LI>
  <LI><CODE>%%</CODE> - 单个百分号（<CODE>'%'</CODE>）。不消耗参数。</LI></UL>
<P>如果占位符没有对应的参数，则占位符不被替换。</P>
<PRE><CODE class="lang-js">util.format('%s:%s', 'foo');
// 返回: 'foo:%s'
</CODE></PRE>
<P>如果传入 <CODE>util.format()</CODE> 方法的参数比占位符的数量多，则多出的参数会被强制转换为字符串（对于对象和符号，使用 
<CODE>util.inspect()</CODE>），然后拼接到返回的字符串，参数之间用一个空格分隔。</P>
<PRE><CODE class="lang-js">util.format('%s:%s', 'foo', 'bar', 'baz'); // 'foo:bar baz'
</CODE></PRE>
<P>如果第一个参数不是一个格式字符串，则 <CODE>util.format()</CODE> 返回一个所有参数用空格分隔并连在一起的字符串。 每个参数都使用 
<CODE>util.inspect()</CODE> 转换为一个字符串。</P>
<PRE><CODE class="lang-js">util.format(1, 2, 3); // '1 2 3'
</CODE></PRE>
<H2>util.inherits(constructor, superConstructor)<SPAN><A class="mark" id="util_util_inherits_constructor_superconstructor" 
href="http://nodejs.cn/api/util.html#util_util_inherits_constructor_superconstructor">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_inherits_constructor_superconstructor">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_inherits_constructor_superconstructor.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> </DIV>
<P>注意，不建议使用 <CODE>util.inherits()</CODE>。 请使用 ES6 的 <CODE>class</CODE> 和 
<CODE>extends</CODE> 关键词获得语言层面的继承支持。 注意，这两种方式是<A href="https://github.com/nodejs/node/issues/4179">语义上不兼容的</A>。</P>
<UL>
  <LI><CODE>constructor</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">&lt;Function&gt;</A></LI>
  <LI><CODE>superConstructor</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">&lt;Function&gt;</A></LI></UL>
<P>从一个<A href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor">构造函数</A>中继承原型方法到另一个。 
<CODE>constructor</CODE> 的原型会被设置到一个从 <CODE>superConstructor</CODE> 创建的新对象上。</P>
<P><CODE>superConstructor</CODE> 可通过 <CODE>constructor.super_</CODE> 属性访问。</P>
<PRE><CODE class="lang-js">const util = require('util');
const EventEmitter = require('events');

function MyStream() {
  EventEmitter.call(this);
}

util.inherits(MyStream, EventEmitter);

MyStream.prototype.write = function(data) {
  this.emit('data', data);
};

const stream = new MyStream();

console.log(stream instanceof EventEmitter); // true
console.log(MyStream.super_ === EventEmitter); // true

stream.on('data', (data) =&gt; {
  console.log(`接收的数据："${data}"`);
});
stream.write('运作良好！'); // 接收的数据："运作良好！"
</CODE></PRE>
<P>例子：使用 ES6 的 <CODE>class</CODE> 和 <CODE>extends</CODE>：</P>
<PRE><CODE class="lang-js">const EventEmitter = require('events');

class MyStream extends EventEmitter {
  constructor() {
    super();
  }
  write(data) {
    this.emit('data', data);
  }
}

const stream = new MyStream();

stream.on('data', (data) =&gt; {
  console.log(`接收的数据："${data}"`);
});
stream.write('使用 ES6');
</CODE></PRE>
<H2>util.inspect(object[, options])<SPAN><A class="mark" id="util_util_inspect_object_options" 
href="http://nodejs.cn/api/util.html#util_util_inspect_object_options">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_inspect_object_options">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_inspect_object_options.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> </DIV>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN> 任何 JavaScript 
  原始值或对象。</LI>
  <LI><CODE>options</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A>
  <UL> 
    <LI><CODE>showHidden</CODE> <SPAN class="type">&lt;boolean&gt;</SPAN> 如果为 
    <CODE>true</CODE>，则 <CODE>object</CODE> 的不可枚举的符号与属性也会被包括在格式化后的结果中。 默认为 
    <CODE>false</CODE>。</LI>
    <LI><CODE>depth</CODE> <SPAN class="type">&lt;number&gt;</SPAN> 指定格式化 
    <CODE>object</CODE> 时递归的次数。 这对查看大型复杂对象很有用。 默认为 <CODE>2</CODE>。 若要无限地递归则传入 
    <CODE>null</CODE>。</LI>
    <LI><CODE>colors</CODE> <SPAN class="type">&lt;boolean&gt;</SPAN> 如果为 
    <CODE>true</CODE>，则输出样式使用 ANSI 颜色代码。 默认为 <CODE>false</CODE>。 颜色可自定义，详见<A 
    href="http://nodejs.cn/api/util.html#util_customizing_util_inspect_colors">自定义 
    <CODE>util.inspect</CODE> 颜色</A>。</LI>
    <LI><CODE>customInspect</CODE> <SPAN class="type">&lt;boolean&gt;</SPAN> 如果为 
    <CODE>false</CODE>，则 <CODE>object</CODE> 上自定义的 <CODE>inspect(depth, 
    opts)</CODE> 函数不会被调用。 默认为 <CODE>true</CODE>。</LI>
    <LI><CODE>showProxy</CODE> <SPAN class="type">&lt;boolean&gt;</SPAN> 如果为 
    <CODE>true</CODE>，则 <CODE>Proxy</CODE> 对象的对象和函数会展示它们的 <CODE>target</CODE> 和 
    <CODE>handler</CODE> 对象。 默认为 <CODE>false</CODE>。</LI>
    <LI><CODE>maxArrayLength</CODE> <SPAN class="type">&lt;number&gt;</SPAN> 
    指定格式化时数组和 <CODE>TypedArray</CODE> 元素能包含的最大数量。 默认为 <CODE>100</CODE>。 设为 
    <CODE>null</CODE> 则显式全部数组元素。 设为 <CODE>0</CODE> 或负数则不显式数组元素。</LI>
    <LI><CODE>breakLength</CODE> <SPAN class="type">&lt;number&gt;</SPAN> 
    一个对象的键被拆分成多行的长度。 设为 <CODE>Infinity</CODE> 则格式化一个对象为单行。 默认为 
    <CODE>60</CODE>。</LI></UL></LI></UL>
<P><CODE>util.inspect()</CODE> 方法返回 <CODE>object</CODE> 的字符串表示，主要用于调试。 附加的 
<CODE>options</CODE> 可用于改变格式化字符串的某些方面。</P>
<P>例子，查看 <CODE>util</CODE> 对象的所有属性：</P>
<PRE><CODE class="lang-js">const util = require('util');

console.log(util.inspect(util, { showHidden: true, depth: null }));
</CODE></PRE>
<P>当调用到达递归查看的当前 <CODE>depth</CODE> 时，值支持自定义的 <CODE>inspect(depth, opts)</CODE> 
函数，传入 <CODE>util.inspect()</CODE> 的选项对象也一样。</P>
<H3>自定义 <CODE>util.inspect</CODE> 颜色<SPAN><A class="mark" id="util_customizing_util_inspect_colors" 
href="http://nodejs.cn/api/util.html#util_customizing_util_inspect_colors">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_customizing_util_inspect_colors">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/customizing_util_inspect_colors.md" 
target="_blank" rel="nofollow">参与翻译</A></P><!-- type=misc --> 
<P>可以通过 <CODE>util.inspect.styles</CODE> 和 <CODE>util.inspect.colors</CODE> 
属性全局地自定义 <CODE>util.inspect</CODE> 的颜色输出（如果已启用）。</P>
<P><CODE>util.inspect.styles</CODE> 是一个映射，关联一个样式名到一个 
<CODE>util.inspect.colors</CODE> 颜色。</P>
<P>默认的样式与关联的颜色有：</P>
<UL>
  <LI><CODE>number</CODE> - <CODE>yellow</CODE></LI>
  <LI><CODE>boolean</CODE> - <CODE>yellow</CODE></LI>
  <LI><CODE>string</CODE> - <CODE>green</CODE></LI>
  <LI><CODE>date</CODE> - <CODE>magenta</CODE></LI>
  <LI><CODE>regexp</CODE> - <CODE>red</CODE></LI>
  <LI><CODE>null</CODE> - <CODE>bold</CODE></LI>
  <LI><CODE>undefined</CODE> - <CODE>grey</CODE></LI>
  <LI><CODE>special</CODE> - <CODE>cyan</CODE> （暂时只用于函数）</LI>
  <LI><CODE>name</CODE> - （无样式）</LI></UL>
<P>预定义的颜色代码有：<CODE>white</CODE>、<CODE>grey</CODE>、<CODE>black</CODE>、<CODE>blue</CODE>、<CODE>cyan</CODE>、<CODE>green</CODE>、<CODE>magenta``red</CODE> 
和 <CODE>yellow</CODE>。 还有 
<CODE>bold</CODE>、<CODE>italic</CODE>、<CODE>underline</CODE> 和 
<CODE>inverse</CODE> 代码。</P>
<P>颜色样式使用 ANSI 控制码，可能不是所有终端都支持。</P>
<H3>自定义对象的查看函数<SPAN><A class="mark" id="util_custom_inspection_functions_on_objects" 
href="http://nodejs.cn/api/util.html#util_custom_inspection_functions_on_objects">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_custom_inspection_functions_on_objects">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/custom_inspection_functions_on_objects.md" 
target="_blank" rel="nofollow">参与翻译</A></P><!-- type=misc --> 
<P>对象可以定义自己的 <CODE>[util.inspect.custom](depth, opts)</CODE>（或 
<CODE>inspect(depth, opts)</CODE>） 函数，<CODE>util.inspect()</CODE> 
会调用并使用查看对象时的结果：</P>
<PRE><CODE class="lang-js">const util = require('util');

class Box {
  constructor(value) {
    this.value = value;
  }

  inspect(depth, options) {
    if (depth &lt; 0) {
      return options.stylize('[Box]', 'special');
    }

    const newOptions = Object.assign({}, options, {
      depth: options.depth === null ? null : options.depth - 1
    });

    // 五个空格的填充，因为那是 "Box&lt; " 的大小。
    const padding = ' '.repeat(5);
    const inner = util.inspect(this.value, newOptions).replace(/\n/g, '\n' + padding);
    return options.stylize('Box', 'special') + '&lt; ' + inner + ' &gt;';
  }
}

const box = new Box(true);

util.inspect(box);
// 返回: "Box&lt; true &gt;"
</CODE></PRE>
<P>自定义的 <CODE>[util.inspect.custom](depth, opts)</CODE> 
函数通常返回一个字符串，但也可以返回一个任何类型的值，它会相应地被 <CODE>util.inspect()</CODE> 格式化。</P>
<PRE><CODE class="lang-js">const util = require('util');

const obj = { foo: '这个不会出现在 inspect() 的输出中' };
obj[util.inspect.custom] = function(depth) {
  return { bar: 'baz' };
};

util.inspect(obj);
// 返回: "{ bar: 'baz' }"
</CODE></PRE>
<P>一个自定义的查看方法可以通过在一个对象上开放一个 <CODE>inspect(depth, opts)</CODE> 方法来提供：</P>
<PRE><CODE class="lang-js">const util = require('util');

const obj = { foo: '这个不会出现在 inspect() 的输出中' };
obj.inspect = function(depth) {
  return { bar: 'baz' };
};

util.inspect(obj);
// 返回: "{ bar: 'baz' }"
</CODE></PRE>
<H3>util.inspect.defaultOptions<SPAN><A class="mark" id="util_util_inspect_defaultoptions" 
href="http://nodejs.cn/api/util.html#util_util_inspect_defaultoptions">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_inspect_defaultoptions">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_inspect_defaultoptions.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v6.4.0</SPAN> </DIV>
<P><CODE>defaultOptions</CODE> 值允许对被 <CODE>util.inspect</CODE> 使用的默认选项进行自定义。 这对 
<CODE>console.log</CODE> 或 <CODE>util.format</CODE> 等显式调用 
<CODE>util.inspect</CODE> 的函数很有用。 它需被设为一个对象，包含一个或多个有效的 <A href="http://nodejs.cn/api/util.html#util_util_inspect_object_options"><CODE>util.inspect()</CODE></A> 
选项。 也支持直接设置选项的属性。</P>
<PRE><CODE class="lang-js">const util = require('util');
const arr = Array(101);

console.log(arr); // 打印截断的数组
util.inspect.defaultOptions.maxArrayLength = null;
console.log(arr); // 打印完整的数组
</CODE></PRE>
<H3>util.inspect.custom<SPAN><A class="mark" id="util_util_inspect_custom" href="http://nodejs.cn/api/util.html#util_util_inspect_custom">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_inspect_custom">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_inspect_custom.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v6.6.0</SPAN> </DIV>
<P>一个符号，可被用于声明自定义的查看函数，详见<A href="http://nodejs.cn/api/util.html#util_custom_inspection_functions_on_objects">自定义对象的查看函数</A>。</P>
<H2>废弃的 API<SPAN><A class="mark" id="util_deprecated_apis" href="http://nodejs.cn/api/util.html#util_deprecated_apis">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_deprecated_apis">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/deprecated_apis.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<P>以下 API 已被废弃，不应该再被使用。 现存的应用和模块应该使用替代方法更新。</P>
<H3>util.debug(string)<SPAN><A class="mark" id="util_util_debug_string" href="http://nodejs.cn/api/util.html#util_util_debug_string">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_debug_string">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_debug_string.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> <SPAN>废弃于: v0.11.3 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用 <A href="http://nodejs.cn/api/console.html#console_console_error_data_args"><CODE>console.error()</CODE></A> 代替。</PRE>
<UL>
  <LI><CODE>string</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  The message to print to <CODE>stderr</CODE></LI></UL>
<P>Deprecated predecessor of <CODE>console.error</CODE>.</P>
<H3>util.error([...strings])<SPAN><A class="mark" id="util_util_error_strings" 
href="http://nodejs.cn/api/util.html#util_util_error_strings">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_error_strings">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_error_strings.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> <SPAN>废弃于: v0.11.3 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用 <A href="http://nodejs.cn/api/console.html#console_console_error_data_args"><CODE>console.error()</CODE></A> 代替。</PRE>
<UL>
  <LI><CODE>...strings</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  The message to print to <CODE>stderr</CODE></LI></UL>
<P>Deprecated predecessor of <CODE>console.error</CODE>.</P>
<H3>util.isArray(object)<SPAN><A class="mark" id="util_util_isarray_object" 
href="http://nodejs.cn/api/util.html#util_util_isarray_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isarray_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isarray_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.6.0</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Internal alias for <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"><CODE>Array.isArray</CODE></A>.</P>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is an 
<CODE>Array</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isArray([]);
// Returns: true
util.isArray(new Array);
// Returns: true
util.isArray({});
// Returns: false
</CODE></PRE>
<H3>util.isBoolean(object)<SPAN><A class="mark" id="util_util_isboolean_object" 
href="http://nodejs.cn/api/util.html#util_util_isboolean_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isboolean_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isboolean_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>Boolean</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isBoolean(1);
// Returns: false
util.isBoolean(0);
// Returns: false
util.isBoolean(false);
// Returns: true
</CODE></PRE>
<H3>util.isBuffer(object)<SPAN><A class="mark" id="util_util_isbuffer_object" 
href="http://nodejs.cn/api/util.html#util_util_isbuffer_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isbuffer_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isbuffer_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用 <A href="http://nodejs.cn/api/buffer.html#buffer_class_method_buffer_isbuffer_obj"><CODE>Buffer.isBuffer()</CODE></A> 代替。</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>Buffer</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isBuffer({ length: 0 });
// Returns: false
util.isBuffer([]);
// Returns: false
util.isBuffer(Buffer.from('hello world'));
// Returns: true
</CODE></PRE>
<H3>util.isDate(object)<SPAN><A class="mark" id="util_util_isdate_object" href="http://nodejs.cn/api/util.html#util_util_isdate_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isdate_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isdate_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.6.0</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>Date</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isDate(new Date());
// Returns: true
util.isDate(Date());
// false (without 'new' returns a String)
util.isDate({});
// Returns: false
</CODE></PRE>
<H3>util.isError(object)<SPAN><A class="mark" id="util_util_iserror_object" 
href="http://nodejs.cn/api/util.html#util_util_iserror_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_iserror_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_iserror_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.6.0</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is an <A href="http://nodejs.cn/api/errors.html#errors_class_error"><CODE>Error</CODE></A>. 
Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isError(new Error());
// Returns: true
util.isError(new TypeError());
// Returns: true
util.isError({ name: 'Error', message: 'an error occurred' });
// Returns: false
</CODE></PRE>
<P>Note that this method relies on <CODE>Object.prototype.toString()</CODE> 
behavior. It is possible to obtain an incorrect result when the 
<CODE>object</CODE> argument manipulates <CODE>@@toStringTag</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');
const obj = { name: 'Error', message: 'an error occurred' };

util.isError(obj);
// Returns: false
obj[Symbol.toStringTag] = 'Error';
util.isError(obj);
// Returns: true
</CODE></PRE>
<H3>util.isFunction(object)<SPAN><A class="mark" id="util_util_isfunction_object" 
href="http://nodejs.cn/api/util.html#util_util_isfunction_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isfunction_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isfunction_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>Function</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

function Foo() {}
const Bar = function() {};

util.isFunction({});
// Returns: false
util.isFunction(Foo);
// Returns: true
util.isFunction(Bar);
// Returns: true
</CODE></PRE>
<H3>util.isNull(object)<SPAN><A class="mark" id="util_util_isnull_object" href="http://nodejs.cn/api/util.html#util_util_isnull_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isnull_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isnull_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is strictly 
<CODE>null</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isNull(0);
// Returns: false
util.isNull(undefined);
// Returns: false
util.isNull(null);
// Returns: true
</CODE></PRE>
<H3>util.isNullOrUndefined(object)<SPAN><A class="mark" id="util_util_isnullorundefined_object" 
href="http://nodejs.cn/api/util.html#util_util_isnullorundefined_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isnullorundefined_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isnullorundefined_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is 
<CODE>null</CODE> or <CODE>undefined</CODE>. Otherwise, returns 
<CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isNullOrUndefined(0);
// Returns: false
util.isNullOrUndefined(undefined);
// Returns: true
util.isNullOrUndefined(null);
// Returns: true
</CODE></PRE>
<H3>util.isNumber(object)<SPAN><A class="mark" id="util_util_isnumber_object" 
href="http://nodejs.cn/api/util.html#util_util_isnumber_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isnumber_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isnumber_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>Number</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isNumber(false);
// Returns: false
util.isNumber(Infinity);
// Returns: true
util.isNumber(0);
// Returns: true
util.isNumber(NaN);
// Returns: true
</CODE></PRE>
<H3>util.isObject(object)<SPAN><A class="mark" id="util_util_isobject_object" 
href="http://nodejs.cn/api/util.html#util_util_isobject_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isobject_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isobject_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is strictly an 
<CODE>Object</CODE> <STRONG>and</STRONG> not a <CODE>Function</CODE>. Otherwise, 
returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isObject(5);
// Returns: false
util.isObject(null);
// Returns: false
util.isObject({});
// Returns: true
util.isObject(function(){});
// Returns: false
</CODE></PRE>
<H3>util.isPrimitive(object)<SPAN><A class="mark" id="util_util_isprimitive_object" 
href="http://nodejs.cn/api/util.html#util_util_isprimitive_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isprimitive_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isprimitive_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a primitive 
type. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isPrimitive(5);
// Returns: true
util.isPrimitive('foo');
// Returns: true
util.isPrimitive(false);
// Returns: true
util.isPrimitive(null);
// Returns: true
util.isPrimitive(undefined);
// Returns: true
util.isPrimitive({});
// Returns: false
util.isPrimitive(function() {});
// Returns: false
util.isPrimitive(/^$/);
// Returns: false
util.isPrimitive(new Date());
// Returns: false
</CODE></PRE>
<H3>util.isRegExp(object)<SPAN><A class="mark" id="util_util_isregexp_object" 
href="http://nodejs.cn/api/util.html#util_util_isregexp_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isregexp_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isregexp_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.6.0</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>RegExp</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isRegExp(/some regexp/);
// Returns: true
util.isRegExp(new RegExp('another regexp'));
// Returns: true
util.isRegExp({});
// Returns: false
</CODE></PRE>
<H3>util.isString(object)<SPAN><A class="mark" id="util_util_isstring_object" 
href="http://nodejs.cn/api/util.html#util_util_isstring_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isstring_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isstring_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>string</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isString('');
// Returns: true
util.isString('foo');
// Returns: true
util.isString(String('foo'));
// Returns: true
util.isString(5);
// Returns: false
</CODE></PRE>
<H3>util.isSymbol(object)<SPAN><A class="mark" id="util_util_issymbol_object" 
href="http://nodejs.cn/api/util.html#util_util_issymbol_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_issymbol_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_issymbol_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is a 
<CODE>Symbol</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.isSymbol(5);
// Returns: false
util.isSymbol('foo');
// Returns: false
util.isSymbol(Symbol('foo'));
// Returns: true
</CODE></PRE>
<H3>util.isUndefined(object)<SPAN><A class="mark" id="util_util_isundefined_object" 
href="http://nodejs.cn/api/util.html#util_util_isundefined_object">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_isundefined_object">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_isundefined_object.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.5</SPAN> <SPAN>废弃于: v4.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的</PRE>
<UL>
  <LI><CODE>object</CODE> <SPAN class="type">&lt;any&gt;</SPAN></LI></UL>
<P>Returns <CODE>true</CODE> if the given <CODE>object</CODE> is 
<CODE>undefined</CODE>. Otherwise, returns <CODE>false</CODE>.</P>
<PRE><CODE class="lang-js">const util = require('util');

const foo = undefined;
util.isUndefined(5);
// Returns: false
util.isUndefined(foo);
// Returns: true
util.isUndefined(null);
// Returns: false
</CODE></PRE>
<H3>util.log(string)<SPAN><A class="mark" id="util_util_log_string" href="http://nodejs.cn/api/util.html#util_util_log_string">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_log_string">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_log_string.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> <SPAN>废弃于: v6.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用第三方模块代替。</PRE>
<UL>
  <LI><CODE>string</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A></LI></UL>
<P>The <CODE>util.log()</CODE> method prints the given <CODE>string</CODE> to 
<CODE>stdout</CODE> with an included timestamp.</P>
<PRE><CODE class="lang-js">const util = require('util');

util.log('Timestamped message.');
</CODE></PRE>
<H3>util.print([...strings])<SPAN><A class="mark" id="util_util_print_strings" 
href="http://nodejs.cn/api/util.html#util_util_print_strings">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_print_strings">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_print_strings.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> <SPAN>废弃于: v0.11.3 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用 <A href="http://nodejs.cn/api/console.html#console_console_log_data_args"><CODE>console.log()</CODE></A> 代替。</PRE>
<P>Deprecated predecessor of <CODE>console.log</CODE>.</P>
<H3>util.puts([...strings])<SPAN><A class="mark" id="util_util_puts_strings" 
href="http://nodejs.cn/api/util.html#util_util_puts_strings">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_puts_strings">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_puts_strings.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.3.0</SPAN> <SPAN>废弃于: v0.11.3 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用 <A href="http://nodejs.cn/api/console.html#console_console_log_data_args"><CODE>console.log()</CODE></A> 代替。</PRE>
<P>Deprecated predecessor of <CODE>console.log</CODE>.</P>
<H3>util._extend(target, source)<SPAN><A class="mark" id="util_util_extend_target_source" 
href="http://nodejs.cn/api/util.html#util_util_extend_target_source">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/util.html#util_util_extend_target_source">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/util/util_extend_target_source.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.5</SPAN> <SPAN>废弃于: v6.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 0</A> - 废弃的: 使用 <A href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><CODE>Object.assign()</CODE></A> 代替。</PRE>
<P>The <CODE>util._extend()</CODE> method was never intended to be used outside 
of internal Node.js modules. The community found and used it anyway.</P>
<P>It is deprecated and should not be used in new code. JavaScript comes with 
very similar built-in functionality through <A href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><CODE>Object.assign()</CODE></A>.</P></DIV></DIV></DIV><!-- 搜索弹窗 --> 
  
<DIV id="modal_search_bg"></DIV>
<DIV 
id="modal_search"><INPUT id="modal_search_input" placeholder="API 快速搜索" value=""> 
    
<DIV id="modal_search_result"></DIV></DIV><!-- js -->   <!--[if lt IE 10]><script src="/static/lib/placeholders.js?20170426"></script><![endif]--> 
  
<SCRIPT src="util%20%20Node_js%20API%20文档_files/api.js"></SCRIPT>
 </BODY></HTML>
