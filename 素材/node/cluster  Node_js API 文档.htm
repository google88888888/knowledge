<!DOCTYPE HTML>
<!-- saved from url=(0033)http://nodejs.cn/api/cluster.html -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="zh-cmn-Hans"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
   
<META charset="utf-8">   <TITLE>cluster | Node.js API 文档</TITLE>   <LINK href="cluster%20%20Node_js%20API%20文档_files/api.css" 
rel="stylesheet">   <LINK href="/static/favicon.png" rel="icon" type="image/png" 
sizes="32x32"> 
<META name="GENERATOR" content="MSHTML 11.00.9600.18639"></HEAD> 
<BODY class="alt apidoc" id="api-section-cluster">
<DIV class="clearfix" id="content">
<DIV class="interior" id="column2">
<DIV class="interior" id="intro"><A href="http://nodejs.cn/">          Node.js 
中文网         </A>         
<DIV><INPUT id="search_input" placeholder="API 快速搜索" value="">         
</DIV></DIV>
<UL>
  <LI><A class="nav-documentation" href="http://nodejs.cn/api/documentation.html">关于本文档</A></LI>
  <LI><A class="nav-synopsis" 
  href="http://nodejs.cn/api/synopsis.html">用法与例子</A></LI></UL>
<DIV class="line"></DIV>
<UL>
  <LI><A class="nav-assert" href="http://nodejs.cn/api/assert.html">Assert 
  (断言)</A></LI>
  <LI><A class="nav-buffer" 
  href="http://nodejs.cn/api/buffer.html">Buffer</A></LI>
  <LI><A class="nav-addons" href="http://nodejs.cn/api/addons.html">C/C++ 
  插件</A></LI>
  <LI><A class="nav-child_process" href="http://nodejs.cn/api/child_process.html">Child 
  Processes (子进程)</A></LI>
  <LI><A class="nav-cluster active" 
  href="http://nodejs.cn/api/cluster.html">Cluster (集群)</A></LI>
  <LI><A class="nav-cli" href="http://nodejs.cn/api/cli.html">CLI 
  (命令行选项)</A></LI>
  <LI><A class="nav-console" href="http://nodejs.cn/api/console.html">Console 
  (控制台)</A></LI>
  <LI><A class="nav-crypto" href="http://nodejs.cn/api/crypto.html">Crypto 
  (加密)</A></LI>
  <LI><A class="nav-debugger" href="http://nodejs.cn/api/debugger.html">Debugger 
  (调试器)</A></LI>
  <LI><A class="nav-dns" href="http://nodejs.cn/api/dns.html">DNS 
  (域名服务器)</A></LI>
  <LI><A class="nav-domain" href="http://nodejs.cn/api/domain.html">Domain 
  (域)</A></LI>
  <LI><A class="nav-errors" href="http://nodejs.cn/api/errors.html">Error 
  (错误)</A></LI>
  <LI><A class="nav-events" href="http://nodejs.cn/api/events.html">Events 
  (事件)</A></LI>
  <LI><A class="nav-fs" href="http://nodejs.cn/api/fs.html">File System 
  (文件系统)</A></LI>
  <LI><A class="nav-globals" href="http://nodejs.cn/api/globals.html">Global 
  (全局变量)</A></LI>
  <LI><A class="nav-http" href="http://nodejs.cn/api/http.html">HTTP</A></LI>
  <LI><A class="nav-https" href="http://nodejs.cn/api/https.html">HTTPS</A></LI>
  <LI><A class="nav-modules" href="http://nodejs.cn/api/modules.html">Module 
  (模块)</A></LI>
  <LI><A class="nav-net" href="http://nodejs.cn/api/net.html">Net (网络)</A></LI>
  <LI><A class="nav-os" href="http://nodejs.cn/api/os.html">OS (操作系统)</A></LI>
  <LI><A class="nav-path" href="http://nodejs.cn/api/path.html">Path 
  (路径)</A></LI>
  <LI><A class="nav-process" href="http://nodejs.cn/api/process.html">Process 
  (进程)</A></LI>
  <LI><A class="nav-punycode" 
  href="http://nodejs.cn/api/punycode.html">Punycode</A></LI>
  <LI><A class="nav-querystring" 
  href="http://nodejs.cn/api/querystring.html">Query Strings (查询字符串)</A></LI>
  <LI><A class="nav-readline" href="http://nodejs.cn/api/readline.html">Readline 
  (逐行读取)</A></LI>
  <LI><A class="nav-repl" href="http://nodejs.cn/api/repl.html">REPL 
  (交互式解释器)</A></LI>
  <LI><A class="nav-stream" href="http://nodejs.cn/api/stream.html">Stream 
  (流)</A></LI>
  <LI><A class="nav-string_decoder" href="http://nodejs.cn/api/string_decoder.html">String 
  Decoder (字符串解码器)</A></LI>
  <LI><A class="nav-timers" href="http://nodejs.cn/api/timers.html">Timer 
  (定时器)</A></LI>
  <LI><A class="nav-tls" href="http://nodejs.cn/api/tls.html">TLS 
  (安全传输层)</A></LI>
  <LI><A class="nav-tty" href="http://nodejs.cn/api/tty.html">TTY (终端)</A></LI>
  <LI><A class="nav-dgram" href="http://nodejs.cn/api/dgram.html">UDP/Datagram 
  (数据报)</A></LI>
  <LI><A class="nav-url" href="http://nodejs.cn/api/url.html">URL</A></LI>
  <LI><A class="nav-util" href="http://nodejs.cn/api/util.html">Util 
  (实用工具)</A></LI>
  <LI><A class="nav-v8" href="http://nodejs.cn/api/v8.html">V8</A></LI>
  <LI><A class="nav-vm" href="http://nodejs.cn/api/vm.html">VM (虚拟机)</A></LI>
  <LI><A class="nav-zlib" href="http://nodejs.cn/api/zlib.html">ZLIB 
  (压缩)</A></LI></UL>
<DIV class="line"></DIV></DIV>
<DIV class="interior" id="column1" data-id="cluster"><HEADER>
<H1>Node.js v6.10.3 文档</H1>
<DIV id="gtoc">
<P><A name="toc" href="http://nodejs.cn/api/">返回文档首页</A>             <!--<a href="/api/all.html">单页面显示</a> |--> 
            <!--<a href="/api/cluster.json">JSON格式</a> |-->             <!--<a href="/api/en/cluster.html">查看英文版</a>--> 
          </P></DIV>
<HR>
</HEADER>
<DIV id="toc">
<H2>目录</H2>
<UL>
  <LI><SPAN class="stability_2"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster">cluster 
  (集群)</A></SPAN>
  <UL> 
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_how_it_works">How 
    It Works</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_class_worker">Class: 
    Worker</A></SPAN>
    <UL> 
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_disconnect">Event: 
      'disconnect'</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_error">Event: 
      'error'</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_exit">Event: 
      'exit'</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_listening">Event: 
      'listening'</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_message">Event: 
      'message'</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_online">Event: 
      'online'</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_disconnect">worker.disconnect()</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_exitedafterdisconnect">worker.exitedAfterDisconnect</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_id">worker.id</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_isconnected">worker.isConnected()</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_isdead">worker.isDead()</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_kill_signal_sigterm">worker.kill([signal='SIGTERM'])</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_process">worker.process</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_send_message_sendhandle_callback">worker.send(message[, 
      sendHandle][, callback])</A></SPAN></LI>
      <LI><SPAN class="stability_0"><A href="http://nodejs.cn/api/cluster.html#cluster_worker_suicide">worker.suicide</A></SPAN></LI></UL></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_disconnect_1">Event: 
    'disconnect'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_exit_1">Event: 
    'exit'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_fork">Event: 
    'fork'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_listening_1">Event: 
    'listening'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_message_1">Event: 
    'message'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_online_1">Event: 
    'online'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_event_setup">Event: 
    'setup'</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_disconnect_callback">cluster.disconnect([callback])</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_fork_env">cluster.fork([env])</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_ismaster">cluster.isMaster</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_isworker">cluster.isWorker</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_schedulingpolicy">cluster.schedulingPolicy</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_settings">cluster.settings</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_setupmaster_settings">cluster.setupMaster([settings])</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_worker">cluster.worker</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/cluster.html#cluster_cluster_workers">cluster.workers</A></SPAN></LI></UL></LI></UL></DIV>
<DIV id="apicontent">
<H1>cluster (集群)<SPAN><A class="mark" id="cluster_cluster" href="http://nodejs.cn/api/cluster.html#cluster_cluster">#</A></SPAN></H1>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<PRE class="api_stability api_stability_2"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 2</A> - 稳定的</PRE>
<P>Node.js的一个实例运行在一个单独的线程上。用多核系统的用户有时会想扩展一个Node.js的集群，去处理负载。</P>
<P>cluster模块可以让您轻松创建所有共享服务器端口的子进程。</P>
<PRE><CODE class="lang-js">const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i &lt; numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) =&gt; {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) =&gt; {
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
</CODE></PRE>
<P>运行Node.js就能看到在8000端口下的所有进程：</P>
<PRE><CODE class="lang-txt">$ node server.js
Master 3596 is running
Worker 4324 started
Worker 4520 started
Worker 6056 started
Worker 5644 started
</CODE></PRE>
<P>请注意，在Windows上，还不能建立一个命名管道。</P>
<H2>How It Works<SPAN><A class="mark" id="cluster_how_it_works" href="http://nodejs.cn/api/cluster.html#cluster_how_it_works">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_how_it_works">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/how_it_works.md" 
target="_blank" rel="nofollow">参与翻译</A></P><!--type=misc--> 
<P>The worker processes are spawned using the <A href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><CODE>child_process.fork()</CODE></A> 
method, so that they can communicate with the parent via IPC and pass server
 handles back and forth.</P>
<P>The cluster module supports two methods of distributing incoming
 connections.</P>
<P>The first one (and the default one on all platforms except Windows), is the 
round-robin approach, where the master process listens on a port, accepts new 
connections and distributes them across the workers in a round-robin fashion, 
with some built-in smarts to avoid overloading a worker process.</P>
<P>The second approach is where the master process creates the listen socket and 
sends it to interested workers. The workers then accept incoming connections 
directly.</P>
<P>The second approach should, in theory, give the best performance. In practice 
however, distribution tends to be very unbalanced due to operating system 
scheduler vagaries. Loads have been observed where over 70% of all connections 
ended up in just two processes, out of a total of eight.</P>
<P>Because <CODE>server.listen()</CODE> hands off most of the work to the master
 process, there are three cases where the behavior between a normal Node.js 
process and a cluster worker differs:</P>
<OL>
  <LI><CODE>server.listen({fd: 7})</CODE> Because the message is passed to the 
  master, file descriptor 7 <STRONG>in the parent</STRONG> will be listened on, 
  and the handle passed to the worker, rather than listening to the worker's
   idea of what the number 7 file descriptor references.</LI>
  <LI><CODE>server.listen(handle)</CODE> Listening on handles explicitly will 
  cause the worker to use the supplied handle, rather than talk to the master
   process.  If the worker already has the handle, then it's presumed that you 
  know what you are doing.</LI>
  <LI><CODE>server.listen(0)</CODE> Normally, this will cause servers to listen 
  on a random port.  However, in a cluster, each worker will receive the same 
  "random" port each time they do <CODE>listen(0)</CODE>.  In essence, the port 
  is random the first time, but predictable thereafter.  If you want to listen 
  on a unique port, generate a port number based on the cluster worker 
ID.</LI></OL>
<P>There is no routing logic in Node.js, or in your program, and no shared state 
between the workers.  Therefore, it is important to design your program such 
that it does not rely too heavily on in-memory data objects for things like 
sessions and login.</P>
<P>Because workers are all separate processes, they can be killed or re-spawned 
depending on your program's needs, without affecting other workers.  As long as 
there are some workers still alive, the server will continue to accept 
connections.  If no workers are alive, existing connections will be dropped and 
new connections will be refused.  Node.js does not automatically manage the 
number of workers for you, however.  It is your responsibility to manage the 
worker pool for your application's needs.</P>
<H2>Class: Worker<SPAN><A class="mark" id="cluster_class_worker" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_class_worker">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/class_worker.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<P>A Worker object contains all public information and method about a worker. In 
the master it can be obtained using <CODE>cluster.workers</CODE>. In a worker it 
can be obtained using <CODE>cluster.worker</CODE>.</P>
<H3>Event: 'disconnect'<SPAN><A class="mark" id="cluster_event_disconnect" href="http://nodejs.cn/api/cluster.html#cluster_event_disconnect">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_disconnect">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_disconnect.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.7</SPAN> </DIV>
<P>Similar to the <CODE>cluster.on('disconnect')</CODE> event, but specific to 
this worker.</P>
<PRE><CODE class="lang-js">cluster.fork().on('disconnect', () =&gt; {
  // Worker has disconnected
});
</CODE></PRE>
<H3>Event: 'error'<SPAN><A class="mark" id="cluster_event_error" href="http://nodejs.cn/api/cluster.html#cluster_event_error">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_error">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_error.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.3</SPAN> </DIV>
<P>This event is the same as the one provided by <A href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><CODE>child_process.fork()</CODE></A>.</P>
<P>In a worker you can also use <CODE>process.on('error')</CODE>.</P>
<H3>Event: 'exit'<SPAN><A class="mark" id="cluster_event_exit" href="http://nodejs.cn/api/cluster.html#cluster_event_exit">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_exit">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_exit.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.2</SPAN> </DIV>
<UL>
  <LI><CODE>code</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;Number&gt;</A> 
  the exit code, if it exited normally.</LI>
  <LI><CODE>signal</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  the name of the signal (e.g. <CODE>'SIGHUP'</CODE>) that caused the process to 
  be killed.</LI></UL>
<P>Similar to the <CODE>cluster.on('exit')</CODE> event, but specific to this 
worker.</P>
<PRE><CODE class="lang-js">const worker = cluster.fork();
worker.on('exit', (code, signal) =&gt; {
  if (signal) {
    console.log(`worker was killed by signal: ${signal}`);
  } else if (code !== 0) {
    console.log(`worker exited with error code: ${code}`);
  } else {
    console.log('worker success!');
  }
});
</CODE></PRE>
<H3>Event: 'listening'<SPAN><A class="mark" id="cluster_event_listening" href="http://nodejs.cn/api/cluster.html#cluster_event_listening">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_listening">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_listening.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><CODE>address</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL>
<P>Similar to the <CODE>cluster.on('listening')</CODE> event, but specific to 
this worker.</P>
<PRE><CODE class="lang-js">cluster.fork().on('listening', (address) =&gt; {
  // Worker is listening
});
</CODE></PRE>
<P>It is not emitted in the worker.</P>
<H3>Event: 'message'<SPAN><A class="mark" id="cluster_event_message" href="http://nodejs.cn/api/cluster.html#cluster_event_message">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_message">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_message.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><CODE>message</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI>
  <LI><CODE>handle</CODE> <SPAN class="type">&lt;undefined&gt;</SPAN> | <A 
  class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL>
<P>Similar to the <CODE>cluster.on('message')</CODE> event, but specific to this 
worker. In a worker you can also use <CODE>process.on('message')</CODE>.</P>
<P>See <A 
href="http://nodejs.cn/api/process.html#process_event_message"><CODE>process</CODE> 
event: <CODE>'message'</CODE></A>.</P>
<P>As an example, here is a cluster that keeps count of the number of requests
 in the master process using the message system:</P>
<PRE><CODE class="lang-js">const cluster = require('cluster');
const http = require('http');

if (cluster.isMaster) {

  // Keep track of http requests
  let numReqs = 0;
  setInterval(() =&gt; {
    console.log(`numReqs = ${numReqs}`);
  }, 1000);

  // Count requests
  function messageHandler(msg) {
    if (msg.cmd &amp;&amp; msg.cmd === 'notifyRequest') {
      numReqs += 1;
    }
  }

  // Start workers and listen for messages containing notifyRequest
  const numCPUs = require('os').cpus().length;
  for (let i = 0; i &lt; numCPUs; i++) {
    cluster.fork();
  }

  for (const id in cluster.workers) {
    cluster.workers[id].on('message', messageHandler);
  }

} else {

  // Worker processes have a http server.
  http.Server((req, res) =&gt; {
    res.writeHead(200);
    res.end('hello world\n');

    // notify master about the request
    process.send({ cmd: 'notifyRequest' });
  }).listen(8000);
}
</CODE></PRE>
<H3>Event: 'online'<SPAN><A class="mark" id="cluster_event_online" href="http://nodejs.cn/api/cluster.html#cluster_event_online">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_online">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_online.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<P>Similar to the <CODE>cluster.on('online')</CODE> event, but specific to this 
worker.</P>
<PRE><CODE class="lang-js">cluster.fork().on('online', () =&gt; {
  // Worker is online
});
</CODE></PRE>
<P>It is not emitted in the worker.</P>
<H3>worker.disconnect()<SPAN><A class="mark" id="cluster_worker_disconnect" 
href="http://nodejs.cn/api/cluster.html#cluster_worker_disconnect">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_disconnect">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_disconnect.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.7</SPAN> </DIV>
<P>In a worker, this function will close all servers, wait for the 
<CODE>'close'</CODE> event on those servers, and then disconnect the IPC 
channel.</P>
<P>In the master, an internal message is sent to the worker causing it to call 
<CODE>.disconnect()</CODE> on itself.</P>
<P>Causes <CODE>.exitedAfterDisconnect</CODE> to be set.</P>
<P>Note that after a server is closed, it will no longer accept new connections,
 but connections may be accepted by any other listening worker. Existing
 connections will be allowed to close as usual. When no more connections exist,
 see <A 
href="http://nodejs.cn/api/net.html#net_event_close"><CODE>server.close()</CODE></A>, 
the IPC channel to the worker will close allowing it to die gracefully.</P>
<P>The above applies <EM>only</EM> to server connections, client connections are 
not automatically closed by workers, and disconnect does not wait for them to 
close before exiting.</P>
<P>Note that in a worker, <CODE>process.disconnect</CODE> exists, but it is not 
this function, it is <A href="http://nodejs.cn/api/child_process.html#child_process_child_disconnect"><CODE>disconnect</CODE></A>.</P>
<P>Because long living server connections may block workers from disconnecting, 
it may be useful to send a message, so application specific actions may be taken 
to close them. It also may be useful to implement a timeout, killing a worker if
 the <CODE>'disconnect'</CODE> event has not been emitted after some time.</P>
<PRE><CODE class="lang-js">if (cluster.isMaster) {
  const worker = cluster.fork();
  let timeout;

  worker.on('listening', (address) =&gt; {
    worker.send('shutdown');
    worker.disconnect();
    timeout = setTimeout(() =&gt; {
      worker.kill();
    }, 2000);
  });

  worker.on('disconnect', () =&gt; {
    clearTimeout(timeout);
  });

} else if (cluster.isWorker) {
  const net = require('net');
  const server = net.createServer((socket) =&gt; {
    // connections never end
  });

  server.listen(8000);

  process.on('message', (msg) =&gt; {
    if (msg === 'shutdown') {
      // initiate graceful close of any connections to server
    }
  });
}
</CODE></PRE>
<H3>worker.exitedAfterDisconnect<SPAN><A class="mark" id="cluster_worker_exitedafterdisconnect" 
href="http://nodejs.cn/api/cluster.html#cluster_worker_exitedafterdisconnect">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_exitedafterdisconnect">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_exitedafterdisconnect.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v6.0.0</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;Boolean&gt;</A></LI></UL>
<P>Set by calling <CODE>.kill()</CODE> or <CODE>.disconnect()</CODE>. Until 
then, it is <CODE>undefined</CODE>.</P>
<P>The boolean <CODE>worker.exitedAfterDisconnect</CODE> lets you distinguish 
between voluntary and accidental exit, the master may choose not to respawn a 
worker based on this value.</P>
<PRE><CODE class="lang-js">cluster.on('exit', (worker, code, signal) =&gt; {
  if (worker.exitedAfterDisconnect === true) {
    console.log('Oh, it was just voluntary – no need to worry');
  }
});

// kill worker
worker.kill();
</CODE></PRE>
<H3>worker.id<SPAN><A class="mark" id="cluster_worker_id" href="http://nodejs.cn/api/cluster.html#cluster_worker_id">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_id">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_id.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.8.0</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;Number&gt;</A></LI></UL>
<P>Each new worker is given its own unique id, this id is stored in the 
<CODE>id</CODE>.</P>
<P>While a worker is alive, this is the key that indexes it in
 cluster.workers</P>
<H3>worker.isConnected()<SPAN><A class="mark" id="cluster_worker_isconnected" 
href="http://nodejs.cn/api/cluster.html#cluster_worker_isconnected">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_isconnected">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_isconnected.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.14</SPAN> </DIV>
<P>This function returns <CODE>true</CODE> if the worker is connected to its 
master via its IPC channel, <CODE>false</CODE> otherwise. A worker is connected 
to its master after it's been created. It is disconnected after the 
<CODE>'disconnect'</CODE> event is emitted.</P>
<H3>worker.isDead()<SPAN><A class="mark" id="cluster_worker_isdead" href="http://nodejs.cn/api/cluster.html#cluster_worker_isdead">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_isdead">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_isdead.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.14</SPAN> </DIV>
<P>This function returns <CODE>true</CODE> if the worker's process has 
terminated (either because of exiting or being signaled). Otherwise, it returns 
<CODE>false</CODE>.</P>
<H3>worker.kill([signal='SIGTERM'])<SPAN><A class="mark" id="cluster_worker_kill_signal_sigterm" 
href="http://nodejs.cn/api/cluster.html#cluster_worker_kill_signal_sigterm">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_kill_signal_sigterm">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_kill_signal_sigterm.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.9.12</SPAN> </DIV>
<UL>
  <LI><CODE>signal</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  Name of the kill signal to send to the worker process.</LI></UL>
<P>This function will kill the worker. In the master, it does this by 
disconnecting the <CODE>worker.process</CODE>, and once disconnected, killing 
with <CODE>signal</CODE>. In the worker, it does it by disconnecting the 
channel, and then exiting with code <CODE>0</CODE>.</P>
<P>Causes <CODE>.exitedAfterDisconnect</CODE> to be set.</P>
<P>This method is aliased as <CODE>worker.destroy()</CODE> for backwards 
compatibility.</P>
<P>Note that in a worker, <CODE>process.kill()</CODE> exists, but it is not this 
function, it is <A href="http://nodejs.cn/api/process.html#process_process_kill_pid_signal"><CODE>kill</CODE></A>.</P>
<H3>worker.process<SPAN><A class="mark" id="cluster_worker_process" href="http://nodejs.cn/api/cluster.html#cluster_worker_process">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_process">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_process.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><A class="type" href="http://nodejs.cn/api/child_process.html#child_process_class_childprocess">&lt;ChildProcess&gt;</A></LI></UL>
<P>All workers are created using <A href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><CODE>child_process.fork()</CODE></A>, 
the returned object from this function is stored as <CODE>.process</CODE>. In a 
worker, the global <CODE>process</CODE> is stored.</P>
<P>See: <A href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options">Child 
Process module</A></P>
<P>Note that workers will call <CODE>process.exit(0)</CODE> if the 
<CODE>'disconnect'</CODE> event occurs on <CODE>process</CODE> and 
<CODE>.exitedAfterDisconnect</CODE> is not <CODE>true</CODE>. This protects 
against accidental disconnection.</P>
<H3>worker.send(message[, sendHandle][, callback])<SPAN><A class="mark" id="cluster_worker_send_message_sendhandle_callback" 
href="http://nodejs.cn/api/cluster.html#cluster_worker_send_message_sendhandle_callback">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_send_message_sendhandle_callback">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_send_message_sendhandle_callback.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><CODE>message</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI>
  <LI><CODE>sendHandle</CODE> <A class="type" href="http://nodejs.cn/api/net.html#net_server_listen_handle_backlog_callback">&lt;Handle&gt;</A></LI>
  <LI><CODE>callback</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">&lt;Function&gt;</A></LI>
  <LI>Returns: Boolean</LI></UL>
<P>Send a message to a worker or master, optionally with a handle.</P>
<P>In the master this sends a message to a specific worker. It is identical to 
<A href="http://nodejs.cn/api/child_process.html#child_process_child_send_message_sendhandle_options_callback"><CODE>ChildProcess.send()</CODE></A>.</P>
<P>In a worker this sends a message to the master. It is identical to 
<CODE>process.send()</CODE>.</P>
<P>This example will echo back all messages from the master:</P>
<PRE><CODE class="lang-js">if (cluster.isMaster) {
  const worker = cluster.fork();
  worker.send('hi there');

} else if (cluster.isWorker) {
  process.on('message', (msg) =&gt; {
    process.send(msg);
  });
}
</CODE></PRE>
<H3>worker.suicide<SPAN><A class="mark" id="cluster_worker_suicide" href="http://nodejs.cn/api/cluster.html#cluster_worker_suicide">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_worker_suicide">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/worker_suicide.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> <SPAN>废弃于: v6.0.0 </SPAN> 
</DIV>
<PRE class="api_stability api_stability_0"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">Stability: 0</A> - Deprecated: Use <A href="http://nodejs.cn/api/cluster.html#cluster_worker_exitedafterdisconnect"><CODE>worker.exitedAfterDisconnect</CODE></A> instead.</PRE>
<P>An alias to <A href="http://nodejs.cn/api/cluster.html#cluster_worker_exitedafterdisconnect"><CODE>worker.exitedAfterDisconnect</CODE></A>.</P>
<P>Set by calling <CODE>.kill()</CODE> or <CODE>.disconnect()</CODE>. Until 
then, it is <CODE>undefined</CODE>.</P>
<P>The boolean <CODE>worker.suicide</CODE> lets you distinguish between 
voluntary and accidental exit, the master may choose not to respawn a worker 
based on this value.</P>
<PRE><CODE class="lang-js">cluster.on('exit', (worker, code, signal) =&gt; {
  if (worker.suicide === true) {
    console.log('Oh, it was just voluntary – no need to worry');
  }
});

// kill worker
worker.kill();
</CODE></PRE>
<P>This API only exists for backwards compatibility and will be removed in the
 future.</P>
<H2>Event: 'disconnect'<SPAN><A class="mark" id="cluster_event_disconnect_1" 
href="http://nodejs.cn/api/cluster.html#cluster_event_disconnect_1">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_disconnect_1">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_disconnect_1.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.9</SPAN> </DIV>
<UL>
  <LI><CODE>worker</CODE> <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI></UL>
<P>Emitted after the worker IPC channel has disconnected. This can occur when a
 worker exits gracefully, is killed, or is disconnected manually (such as with
 worker.disconnect()).</P>
<P>There may be a delay between the <CODE>'disconnect'</CODE> and 
<CODE>'exit'</CODE> events.  These events can be used to detect if the process 
is stuck in a cleanup or if there are long-living connections.</P>
<PRE><CODE class="lang-js">cluster.on('disconnect', (worker) =&gt; {
  console.log(`The worker #${worker.id} has disconnected`);
});
</CODE></PRE>
<H2>Event: 'exit'<SPAN><A class="mark" id="cluster_event_exit_1" href="http://nodejs.cn/api/cluster.html#cluster_event_exit_1">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_exit_1">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_exit_1.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.9</SPAN> </DIV>
<UL>
  <LI><CODE>worker</CODE> <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI>
  <LI><CODE>code</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;Number&gt;</A> 
  the exit code, if it exited normally.</LI>
  <LI><CODE>signal</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
  the name of the signal (e.g. <CODE>'SIGHUP'</CODE>) that caused the process to 
  be killed.</LI></UL>
<P>When any of the workers die the cluster module will emit the 
<CODE>'exit'</CODE> event.</P>
<P>This can be used to restart the worker by calling <CODE>.fork()</CODE> 
again.</P>
<PRE><CODE class="lang-js">cluster.on('exit', (worker, code, signal) =&gt; {
  console.log('worker %d died (%s). restarting...',
    worker.process.pid, signal || code);
  cluster.fork();
});
</CODE></PRE>
<P>See <A href="http://nodejs.cn/api/child_process.html#child_process_event_exit">child_process 
event: 'exit'</A>.</P>
<H2>Event: 'fork'<SPAN><A class="mark" id="cluster_event_fork" href="http://nodejs.cn/api/cluster.html#cluster_event_fork">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_fork">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_fork.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><CODE>worker</CODE> <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI></UL>
<P>When a new worker is forked the cluster module will emit a 
<CODE>'fork'</CODE> event. This can be used to log worker activity, and create 
your own timeout.</P>
<PRE><CODE class="lang-js">const timeouts = [];
function errorMsg() {
  console.error('Something must be wrong with the connection ...');
}

cluster.on('fork', (worker) =&gt; {
  timeouts[worker.id] = setTimeout(errorMsg, 2000);
});
cluster.on('listening', (worker, address) =&gt; {
  clearTimeout(timeouts[worker.id]);
});
cluster.on('exit', (worker, code, signal) =&gt; {
  clearTimeout(timeouts[worker.id]);
  errorMsg();
});
</CODE></PRE>
<H2>Event: 'listening'<SPAN><A class="mark" id="cluster_event_listening_1" href="http://nodejs.cn/api/cluster.html#cluster_event_listening_1">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_listening_1">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_listening_1.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><CODE>worker</CODE> <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI>
  <LI><CODE>address</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL>
<P>After calling <CODE>listen()</CODE> from a worker, when the 
<CODE>'listening'</CODE> event is emitted on the server, a 
<CODE>'listening'</CODE> event will also be emitted on <CODE>cluster</CODE> in 
the master.</P>
<P>The event handler is executed with two arguments, the <CODE>worker</CODE> 
contains the worker object and the <CODE>address</CODE> object contains the 
following connection properties: <CODE>address</CODE>, <CODE>port</CODE> and 
<CODE>addressType</CODE>. This is very useful if the worker is listening on more 
than one address.</P>
<PRE><CODE class="lang-js">cluster.on('listening', (worker, address) =&gt; {
  console.log(
    `A worker is now connected to ${address.address}:${address.port}`);
});
</CODE></PRE>
<P>The <CODE>addressType</CODE> is one of:</P>
<UL>
  <LI><CODE>4</CODE> (TCPv4)</LI>
  <LI><CODE>6</CODE> (TCPv6)</LI>
  <LI><CODE>-1</CODE> (unix domain socket)</LI>
  <LI><CODE>"udp4"</CODE> or <CODE>"udp6"</CODE> (UDP v4 or v6)</LI></UL>
<H2>Event: 'message'<SPAN><A class="mark" id="cluster_event_message_1" href="http://nodejs.cn/api/cluster.html#cluster_event_message_1">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_message_1">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_message_1.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="signature">
<UL>
  <LI><CODE>worker</CODE> <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI>
  <LI><CODE>message</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI>
  <LI><CODE>handle</CODE> <SPAN class="type">&lt;undefined&gt;</SPAN> | <A 
  class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL></DIV>
<P>Emitted when the cluster master receives a message from any worker.</P>
<P>See <A href="http://nodejs.cn/api/child_process.html#child_process_event_message">child_process 
event: 'message'</A>.</P>
<P>Before Node.js v6.0, this event emitted only the message and the handle, but 
not the worker object, contrary to what the documentation stated.</P>
<P>If you need to support older versions and don't need the worker object, you 
can work around the discrepancy by checking the number of arguments:</P>
<PRE><CODE class="lang-js">cluster.on('message', (worker, message, handle) =&gt; {
  if (arguments.length === 2) {
    handle = message;
    message = worker;
    worker = undefined;
  }
  // ...
});
</CODE></PRE>
<H2>Event: 'online'<SPAN><A class="mark" id="cluster_event_online_1" href="http://nodejs.cn/api/cluster.html#cluster_event_online_1">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_online_1">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_online_1.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><CODE>worker</CODE> <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI></UL>
<P>After forking a new worker, the worker should respond with an online message.
 When the master receives an online message it will emit this event. The 
difference between <CODE>'fork'</CODE> and <CODE>'online'</CODE> is that fork is 
emitted when the master forks a worker, and 'online' is emitted when the worker 
is running.</P>
<PRE><CODE class="lang-js">cluster.on('online', (worker) =&gt; {
  console.log('Yay, the worker responded after it was forked');
});
</CODE></PRE>
<H2>Event: 'setup'<SPAN><A class="mark" id="cluster_event_setup" href="http://nodejs.cn/api/cluster.html#cluster_event_setup">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_event_setup">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/event_setup.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.1</SPAN> </DIV>
<UL>
  <LI><CODE>settings</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL>
<P>Emitted every time <CODE>.setupMaster()</CODE> is called.</P>
<P>The <CODE>settings</CODE> object is the <CODE>cluster.settings</CODE> object 
at the time <CODE>.setupMaster()</CODE> was called and is advisory only, since 
multiple calls to <CODE>.setupMaster()</CODE> can be made in a single tick.</P>
<P>If accuracy is important, use <CODE>cluster.settings</CODE>.</P>
<H2>cluster.disconnect([callback])<SPAN><A class="mark" id="cluster_cluster_disconnect_callback" 
href="http://nodejs.cn/api/cluster.html#cluster_cluster_disconnect_callback">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_disconnect_callback">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_disconnect_callback.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.7</SPAN> </DIV>
<UL>
  <LI><CODE>callback</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">&lt;Function&gt;</A> 
  called when all workers are disconnected and handles are closed</LI></UL>
<P>Calls <CODE>.disconnect()</CODE> on each worker in 
<CODE>cluster.workers</CODE>.</P>
<P>When they are disconnected all internal handles will be closed, allowing the
 master process to die gracefully if no other event is waiting.</P>
<P>The method takes an optional callback argument which will be called when 
finished.</P>
<P>This can only be called from the master process.</P>
<H2>cluster.fork([env])<SPAN><A class="mark" id="cluster_cluster_fork_env" href="http://nodejs.cn/api/cluster.html#cluster_cluster_fork_env">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_fork_env">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_fork_env.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.6.0</SPAN> </DIV>
<UL>
  <LI><CODE>env</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A> 
  Key/value pairs to add to worker process environment.</LI>
  <LI>return <A class="type" href="http://nodejs.cn/api/cluster.html#cluster_class_worker">&lt;cluster.Worker&gt;</A></LI></UL>
<P>Spawn a new worker process.</P>
<P>This can only be called from the master process.</P>
<H2>cluster.isMaster<SPAN><A class="mark" id="cluster_cluster_ismaster" href="http://nodejs.cn/api/cluster.html#cluster_cluster_ismaster">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_ismaster">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_ismaster.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.8.1</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;Boolean&gt;</A></LI></UL>
<P>True if the process is a master. This is determined by the 
<CODE>process.env.NODE_UNIQUE_ID</CODE>. If 
<CODE>process.env.NODE_UNIQUE_ID</CODE> is undefined, then <CODE>isMaster</CODE> 
is <CODE>true</CODE>.</P>
<H2>cluster.isWorker<SPAN><A class="mark" id="cluster_cluster_isworker" href="http://nodejs.cn/api/cluster.html#cluster_cluster_isworker">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_isworker">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_isworker.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.6.0</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;Boolean&gt;</A></LI></UL>
<P>True if the process is not a master (it is the negation of 
<CODE>cluster.isMaster</CODE>).</P>
<H2>cluster.schedulingPolicy<SPAN><A class="mark" id="cluster_cluster_schedulingpolicy" 
href="http://nodejs.cn/api/cluster.html#cluster_cluster_schedulingpolicy">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_schedulingpolicy">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_schedulingpolicy.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.11.2</SPAN> </DIV>
<P>The scheduling policy, either <CODE>cluster.SCHED_RR</CODE> for round-robin 
or <CODE>cluster.SCHED_NONE</CODE> to leave it to the operating system. This is 
a global setting and effectively frozen once you spawn the first worker or call 
<CODE>cluster.setupMaster()</CODE>, whatever comes first.</P>
<P><CODE>SCHED_RR</CODE> is the default on all operating systems except Windows.
 Windows will change to <CODE>SCHED_RR</CODE> once libuv is able to effectively
 distribute IOCP handles without incurring a large performance hit.</P>
<P><CODE>cluster.schedulingPolicy</CODE> can also be set through the 
<CODE>NODE_CLUSTER_SCHED_POLICY</CODE> environment variable. Valid values are 
<CODE>"rr"</CODE> and <CODE>"none"</CODE>.</P>
<H2>cluster.settings<SPAN><A class="mark" id="cluster_cluster_settings" href="http://nodejs.cn/api/cluster.html#cluster_cluster_settings">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_settings">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_settings.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.1</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A>
  <UL> 
    <LI><CODE>execArgv</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">&lt;Array&gt;</A> 
    list of string arguments passed to the Node.js executable. 
    (Default=<CODE>process.execArgv</CODE>)</LI>
    <LI><CODE>exec</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
    file path to worker file.  (Default=<CODE>process.argv[1]</CODE>)</LI>
    <LI><CODE>args</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">&lt;Array&gt;</A> 
    string arguments passed to worker.
     (Default=<CODE>process.argv.slice(2)</CODE>)</LI>
    <LI><CODE>silent</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;Boolean&gt;</A> 
    whether or not to send output to parent's stdio.
     (Default=<CODE>false</CODE>)</LI>
    <LI><CODE>stdio</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">&lt;Array&gt;</A> 
    Configures the stdio of forked processes. Because the cluster module relies 
    on IPC to function, this configuration must contain an <CODE>'ipc'</CODE> 
    entry. When this option is provided, it overrides <CODE>silent</CODE>.</LI>
    <LI><CODE>uid</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;Number&gt;</A> 
    Sets the user identity of the process. (See <A href="http://man7.org/linux/man-pages/man2/setuid.2.html">setuid(2)</A>.)</LI>
    <LI><CODE>gid</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;Number&gt;</A> 
    Sets the group identity of the process. (See <A href="http://man7.org/linux/man-pages/man2/setgid.2.html">setgid(2)</A>.)</LI></UL></LI></UL>
<P>After calling <CODE>.setupMaster()</CODE> (or <CODE>.fork()</CODE>) this 
settings object will contain the settings, including the default values.</P>
<P>This object is not supposed to be changed or set manually, by you.</P>
<H2>cluster.setupMaster([settings])<SPAN><A class="mark" id="cluster_cluster_setupmaster_settings" 
href="http://nodejs.cn/api/cluster.html#cluster_cluster_setupmaster_settings">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_setupmaster_settings">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_setupmaster_settings.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.1</SPAN> </DIV>
<UL>
  <LI><CODE>settings</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A>
  <UL> 
    <LI><CODE>exec</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;String&gt;</A> 
    file path to worker file.  (Default=<CODE>process.argv[1]</CODE>)</LI>
    <LI><CODE>args</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">&lt;Array&gt;</A> 
    string arguments passed to worker.
     (Default=<CODE>process.argv.slice(2)</CODE>)</LI>
    <LI><CODE>silent</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;Boolean&gt;</A> 
    whether or not to send output to parent's stdio.
     (Default=<CODE>false</CODE>)</LI>
    <LI><CODE>stdio</CODE> <A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">&lt;Array&gt;</A> 
    Configures the stdio of forked processes. When this option is provided, it 
    overrides <CODE>silent</CODE>.</LI></UL></LI></UL>
<P><CODE>setupMaster</CODE> is used to change the default 'fork' behavior. Once 
called, the settings will be present in <CODE>cluster.settings</CODE>.</P>
<P>Note that:</P>
<UL>
  <LI>any settings changes only affect future calls to <CODE>.fork()</CODE> and 
  have no effect on workers that are already running</LI>
  <LI>The <EM>only</EM> attribute of a worker that cannot be set via 
  <CODE>.setupMaster()</CODE> is the <CODE>env</CODE> passed to 
  <CODE>.fork()</CODE></LI>
  <LI>the defaults above apply to the first call only, the defaults for later
   calls is the current value at the time of <CODE>cluster.setupMaster()</CODE> 
  is called</LI></UL>
<P>Example:</P>
<PRE><CODE class="lang-js">const cluster = require('cluster');
cluster.setupMaster({
  exec: 'worker.js',
  args: ['--use', 'https'],
  silent: true
});
cluster.fork(); // https worker
cluster.setupMaster({
  exec: 'worker.js',
  args: ['--use', 'http']
});
cluster.fork(); // http worker
</CODE></PRE>
<P>This can only be called from the master process.</P>
<H2>cluster.worker<SPAN><A class="mark" id="cluster_cluster_worker" href="http://nodejs.cn/api/cluster.html#cluster_cluster_worker">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_worker">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_worker.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL>
<P>A reference to the current worker object. Not available in the master 
process.</P>
<PRE><CODE class="lang-js">const cluster = require('cluster');

if (cluster.isMaster) {
  console.log('I am master');
  cluster.fork();
  cluster.fork();
} else if (cluster.isWorker) {
  console.log(`I am worker #${cluster.worker.id}`);
}
</CODE></PRE>
<H2>cluster.workers<SPAN><A class="mark" id="cluster_cluster_workers" href="http://nodejs.cn/api/cluster.html#cluster_cluster_workers">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/cluster.html#cluster_cluster_workers">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/cluster/cluster_workers.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="api_metadata"><SPAN>新增于: v0.7.0</SPAN> </DIV>
<UL>
  <LI><A class="type" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</A></LI></UL>
<P>A hash that stores the active worker objects, keyed by <CODE>id</CODE> field. 
Makes it easy to loop through all the workers. It is only available in the 
master process.</P>
<P>A worker is removed from cluster.workers after the worker has disconnected 
<EM>and</EM> exited. The order between these two events cannot be determined in 
advance. However, it is guaranteed that the removal from the cluster.workers 
list happens before last <CODE>'disconnect'</CODE> or <CODE>'exit'</CODE> event 
is emitted.</P>
<PRE><CODE class="lang-js">// Go through all workers
function eachWorker(callback) {
  for (const id in cluster.workers) {
    callback(cluster.workers[id]);
  }
}
eachWorker((worker) =&gt; {
  worker.send('big announcement to all workers');
});
</CODE></PRE>
<P>Should you wish to reference a worker over a communication channel, using the 
worker's unique id is the easiest way to find the worker.</P>
<PRE><CODE class="lang-js">socket.on('data', (id) =&gt; {
  const worker = cluster.workers[id];
});
</CODE></PRE></DIV></DIV></DIV><!-- 搜索弹窗 --> 
  
<DIV id="modal_search_bg"></DIV>
<DIV 
id="modal_search"><INPUT id="modal_search_input" placeholder="API 快速搜索" value=""> 
    
<DIV id="modal_search_result"></DIV></DIV><!-- js -->   <!--[if lt IE 10]><script src="/static/lib/placeholders.js?20170426"></script><![endif]--> 
  
<SCRIPT src="cluster%20%20Node_js%20API%20文档_files/api.js"></SCRIPT>
 </BODY></HTML>
