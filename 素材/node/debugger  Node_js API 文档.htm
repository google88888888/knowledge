<!DOCTYPE HTML>
<!-- saved from url=(0034)http://nodejs.cn/api/debugger.html -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="zh-cmn-Hans"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
   
<META charset="utf-8">   <TITLE>debugger | Node.js API 文档</TITLE>   <LINK href="debugger%20%20Node_js%20API%20文档_files/api.css" 
rel="stylesheet">   <LINK href="/static/favicon.png" rel="icon" type="image/png" 
sizes="32x32"> 
<META name="GENERATOR" content="MSHTML 11.00.9600.18639"></HEAD> 
<BODY class="alt apidoc" id="api-section-debugger">
<DIV class="clearfix" id="content">
<DIV class="interior" id="column2">
<DIV class="interior" id="intro"><A href="http://nodejs.cn/">          Node.js 
中文网         </A>         
<DIV><INPUT id="search_input" placeholder="API 快速搜索" value="">         
</DIV></DIV>
<UL>
  <LI><A class="nav-documentation" href="http://nodejs.cn/api/documentation.html">关于本文档</A></LI>
  <LI><A class="nav-synopsis" 
  href="http://nodejs.cn/api/synopsis.html">用法与例子</A></LI></UL>
<DIV class="line"></DIV>
<UL>
  <LI><A class="nav-assert" href="http://nodejs.cn/api/assert.html">Assert 
  (断言)</A></LI>
  <LI><A class="nav-buffer" 
  href="http://nodejs.cn/api/buffer.html">Buffer</A></LI>
  <LI><A class="nav-addons" href="http://nodejs.cn/api/addons.html">C/C++ 
  插件</A></LI>
  <LI><A class="nav-child_process" href="http://nodejs.cn/api/child_process.html">Child 
  Processes (子进程)</A></LI>
  <LI><A class="nav-cluster" href="http://nodejs.cn/api/cluster.html">Cluster 
  (集群)</A></LI>
  <LI><A class="nav-cli" href="http://nodejs.cn/api/cli.html">CLI 
  (命令行选项)</A></LI>
  <LI><A class="nav-console" href="http://nodejs.cn/api/console.html">Console 
  (控制台)</A></LI>
  <LI><A class="nav-crypto" href="http://nodejs.cn/api/crypto.html">Crypto 
  (加密)</A></LI>
  <LI><A class="nav-debugger active" 
  href="http://nodejs.cn/api/debugger.html">Debugger (调试器)</A></LI>
  <LI><A class="nav-dns" href="http://nodejs.cn/api/dns.html">DNS 
  (域名服务器)</A></LI>
  <LI><A class="nav-domain" href="http://nodejs.cn/api/domain.html">Domain 
  (域)</A></LI>
  <LI><A class="nav-errors" href="http://nodejs.cn/api/errors.html">Error 
  (错误)</A></LI>
  <LI><A class="nav-events" href="http://nodejs.cn/api/events.html">Events 
  (事件)</A></LI>
  <LI><A class="nav-fs" href="http://nodejs.cn/api/fs.html">File System 
  (文件系统)</A></LI>
  <LI><A class="nav-globals" href="http://nodejs.cn/api/globals.html">Global 
  (全局变量)</A></LI>
  <LI><A class="nav-http" href="http://nodejs.cn/api/http.html">HTTP</A></LI>
  <LI><A class="nav-https" href="http://nodejs.cn/api/https.html">HTTPS</A></LI>
  <LI><A class="nav-modules" href="http://nodejs.cn/api/modules.html">Module 
  (模块)</A></LI>
  <LI><A class="nav-net" href="http://nodejs.cn/api/net.html">Net (网络)</A></LI>
  <LI><A class="nav-os" href="http://nodejs.cn/api/os.html">OS (操作系统)</A></LI>
  <LI><A class="nav-path" href="http://nodejs.cn/api/path.html">Path 
  (路径)</A></LI>
  <LI><A class="nav-process" href="http://nodejs.cn/api/process.html">Process 
  (进程)</A></LI>
  <LI><A class="nav-punycode" 
  href="http://nodejs.cn/api/punycode.html">Punycode</A></LI>
  <LI><A class="nav-querystring" 
  href="http://nodejs.cn/api/querystring.html">Query Strings (查询字符串)</A></LI>
  <LI><A class="nav-readline" href="http://nodejs.cn/api/readline.html">Readline 
  (逐行读取)</A></LI>
  <LI><A class="nav-repl" href="http://nodejs.cn/api/repl.html">REPL 
  (交互式解释器)</A></LI>
  <LI><A class="nav-stream" href="http://nodejs.cn/api/stream.html">Stream 
  (流)</A></LI>
  <LI><A class="nav-string_decoder" href="http://nodejs.cn/api/string_decoder.html">String 
  Decoder (字符串解码器)</A></LI>
  <LI><A class="nav-timers" href="http://nodejs.cn/api/timers.html">Timer 
  (定时器)</A></LI>
  <LI><A class="nav-tls" href="http://nodejs.cn/api/tls.html">TLS 
  (安全传输层)</A></LI>
  <LI><A class="nav-tty" href="http://nodejs.cn/api/tty.html">TTY (终端)</A></LI>
  <LI><A class="nav-dgram" href="http://nodejs.cn/api/dgram.html">UDP/Datagram 
  (数据报)</A></LI>
  <LI><A class="nav-url" href="http://nodejs.cn/api/url.html">URL</A></LI>
  <LI><A class="nav-util" href="http://nodejs.cn/api/util.html">Util 
  (实用工具)</A></LI>
  <LI><A class="nav-v8" href="http://nodejs.cn/api/v8.html">V8</A></LI>
  <LI><A class="nav-vm" href="http://nodejs.cn/api/vm.html">VM (虚拟机)</A></LI>
  <LI><A class="nav-zlib" href="http://nodejs.cn/api/zlib.html">ZLIB 
  (压缩)</A></LI></UL>
<DIV class="line"></DIV></DIV>
<DIV class="interior" id="column1" data-id="debugger"><HEADER>
<H1>Node.js v6.10.3 文档</H1>
<DIV id="gtoc">
<P><A name="toc" href="http://nodejs.cn/api/">返回文档首页</A>             <!--<a href="/api/all.html">单页面显示</a> |--> 
            <!--<a href="/api/debugger.json">JSON格式</a> |-->             <!--<a href="/api/en/debugger.html">查看英文版</a>--> 
          </P></DIV>
<HR>
</HEADER>
<DIV id="toc">
<H2>目录</H2>
<UL>
  <LI><SPAN class="stability_2"><A href="http://nodejs.cn/api/debugger.html#debugger_debugger">debugger 
  (调试器)</A></SPAN>
  <UL> 
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_watchers">监视器</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_command_reference">命令参考手册</A></SPAN>
    <UL> 
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_stepping">步进</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_breakpoints">断点</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_information">信息</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_execution_control">执行控制</A></SPAN></LI>
      <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_various">杂项</A></SPAN></LI></UL></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_advanced_usage">高级用法</A></SPAN></LI>
    <LI><SPAN class="stability_undefined"><A href="http://nodejs.cn/api/debugger.html#debugger_v8_inspector_integration_for_node_js">Node.js 
    的 V8 检查器集合</A></SPAN></LI></UL></LI></UL></DIV>
<DIV id="apicontent">
<H1>debugger (调试器)<SPAN><A class="mark" id="debugger_debugger" href="http://nodejs.cn/api/debugger.html#debugger_debugger">#</A></SPAN></H1>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_debugger">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/debugger.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<PRE class="api_stability api_stability_2"><A href="http://nodejs.cn/api/documentation.html#documentation_stability_index">稳定性: 2</A> - 稳定的</PRE><!-- type=misc --> 
<P>Node.js 包含一个进程外的调试工具，可以通过<A href="https://github.com/v8/v8/wiki/Debugging-Protocol">基于 
TCP 的协议</A>和内置调试客户端访问。 要使用它，可以带上 <CODE>debug</CODE> 参数启动 
Node.js，并带上需要调试的脚本的路径；然后会显示一个提示，表明成功启动调试器：</P>
<PRE><CODE class="lang-txt">$ node debug myscript.js
&lt; debugger listening on port 5858
connecting... ok
break in /home/indutny/Code/git/indutny/myscript.js:1
  1 x = 5;
  2 setTimeout(() =&gt; {
  3   debugger;
debug&gt;
</CODE></PRE>
<P>Node.js 的调试器客户端还未支持全部特性，但可以做些简单的步骤和检测。</P>
<P>在脚本的源代码中插入 <CODE>debugger;</CODE> 语句，则会在代码的那个位置启用一个断点：</P>
<PRE><CODE class="lang-js">// myscript.js
x = 5;
setTimeout(() =&gt; {
  debugger;
  console.log('world');
}, 1000);
console.log('hello');
</CODE></PRE>
<P>一旦运行调试器，则会在第 4 行出现一个断点：</P>
<PRE><CODE class="lang-txt">$ node debug myscript.js
&lt; debugger listening on port 5858
connecting... ok
break in /home/indutny/Code/git/indutny/myscript.js:1
  1 x = 5;
  2 setTimeout(() =&gt; {
  3   debugger;
debug&gt; cont
&lt; hello
break in /home/indutny/Code/git/indutny/myscript.js:3
  1 x = 5;
  2 setTimeout(() =&gt; {
  3   debugger;
  4   console.log('world');
  5 }, 1000);
debug&gt; next
break in /home/indutny/Code/git/indutny/myscript.js:4
  2 setTimeout(() =&gt; {
  3   debugger;
  4   console.log('world');
  5 }, 1000);
  6 console.log('hello');
debug&gt; repl
Press Ctrl + C to leave debug repl
&gt; x
5
&gt; 2+2
4
debug&gt; next
&lt; world
break in /home/indutny/Code/git/indutny/myscript.js:5
  3   debugger;
  4   console.log('world');
  5 }, 1000);
  6 console.log('hello');
  7
debug&gt; quit
</CODE></PRE>
<P><CODE>repl</CODE> 命令用于运行代码。 <CODE>next</CODE> 命令用于步入下一行。 输入 <CODE>help</CODE> 
可查看其他可用的命令。</P>
<P>按下 <CODE>enter</CODE> 键且不输入命令，可重复上一个调试命令。</P>
<H2>监视器<SPAN><A class="mark" id="debugger_watchers" href="http://nodejs.cn/api/debugger.html#debugger_watchers">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_watchers">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/watchers.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<P>可以在调试时监视表达式和变量的值。 在每个断点上，监视器列表中的每个表达式都会在当前上下文中被执行，并在断点的源代码列表之前立即显示。</P>
<P>输入 <CODE>watch('my_expression')</CODE> 开始监视一个表达式。 <CODE>watchers</CODE> 
命令会打印已激活的监视器。 输入 <CODE>unwatch('my_expression')</CODE> 来移除一个监视器。</P>
<H2>命令参考手册<SPAN><A class="mark" id="debugger_command_reference" href="http://nodejs.cn/api/debugger.html#debugger_command_reference">#</A></SPAN></H2>
<H3>步进<SPAN><A class="mark" id="debugger_stepping" href="http://nodejs.cn/api/debugger.html#debugger_stepping">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_stepping">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/stepping.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="signature">
<UL>
  <LI><CODE>cont</CODE>, <CODE>c</CODE> - 继续执行</LI>
  <LI><CODE>next</CODE>, <CODE>n</CODE> - 下一步</LI>
  <LI><CODE>step</CODE>, <CODE>s</CODE> - 跳进函数</LI>
  <LI><CODE>out</CODE>, <CODE>o</CODE> - 跳出函数</LI>
  <LI><CODE>pause</CODE> - 暂停运行代码（类似开发者工具中的暂停按钮）</LI></UL></DIV>
<H3>断点<SPAN><A class="mark" id="debugger_breakpoints" href="http://nodejs.cn/api/debugger.html#debugger_breakpoints">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_breakpoints">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/breakpoints.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="signature">
<UL>
  <LI><CODE>setBreakpoint()</CODE>, <CODE>sb()</CODE> - 在当前行设置断点</LI>
  <LI><CODE>setBreakpoint(line)</CODE>, <CODE>sb(line)</CODE> - 在指定行设置断点</LI>
  <LI><CODE>setBreakpoint('fn()')</CODE>, <CODE>sb(...)</CODE> - 
  在函数体的第一条语句设置断点</LI>
  <LI><CODE>setBreakpoint('script.js', 1)</CODE>, <CODE>sb(...)</CODE> - 在 
  script.js 的第 1 行设置断点</LI>
  <LI><CODE>clearBreakpoint('script.js', 1)</CODE>, <CODE>cb(...)</CODE> - 清除 
  script.js 第 1 行的断点</LI></UL></DIV>
<P>也可以在一个还未被加载的文件（模块）中设置断点：</P>
<PRE><CODE class="lang-txt">$ node debug test/fixtures/break-in-module/main.js
&lt; debugger listening on port 5858
connecting to port 5858... ok
break in test/fixtures/break-in-module/main.js:1
  1 var mod = require('./mod.js');
  2 mod.hello();
  3 mod.hello();
debug&gt; setBreakpoint('mod.js', 23)
Warning: script 'mod.js' was not loaded yet.
  1 var mod = require('./mod.js');
  2 mod.hello();
  3 mod.hello();
debug&gt; c
break in test/fixtures/break-in-module/mod.js:23
 21
 22 exports.hello = () =&gt; {
 23   return 'hello from module';
 24 };
 25
debug&gt;
</CODE></PRE>
<H3>信息<SPAN><A class="mark" id="debugger_information" href="http://nodejs.cn/api/debugger.html#debugger_information">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_information">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/information.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="signature">
<UL>
  <LI><CODE>backtrace</CODE>, <CODE>bt</CODE> - 打印当前执行框架的回溯</LI>
  <LI><CODE>list(5)</CODE> - 列出脚本源代码的 5 行上下文（前后各 5 行）</LI>
  <LI><CODE>watch(expr)</CODE> - 添加表达式到监视列表</LI>
  <LI><CODE>unwatch(expr)</CODE> - 从监视列表移除表达式</LI>
  <LI><CODE>watchers</CODE> - 列出所有监视器和它们的值（每个断点会自动列出）</LI>
  <LI><CODE>repl</CODE> - 打开调试器的 repl，用于在所调试的脚本的上下文中进行执行</LI>
  <LI><CODE>exec expr</CODE> - 在所调试的脚本的上下文中执行一个表达式</LI></UL></DIV>
<H3>执行控制<SPAN><A class="mark" id="debugger_execution_control" href="http://nodejs.cn/api/debugger.html#debugger_execution_control">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_execution_control">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/execution_control.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="signature">
<UL>
  <LI><CODE>run</CODE> - 运行脚本（调试器开始时自动运行）</LI>
  <LI><CODE>restart</CODE> - 重新启动脚本</LI>
  <LI><CODE>kill</CODE> - 终止脚本</LI></UL></DIV>
<H3>杂项<SPAN><A class="mark" id="debugger_various" href="http://nodejs.cn/api/debugger.html#debugger_various">#</A></SPAN></H3>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_various">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/various.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<DIV class="signature">
<UL>
  <LI><CODE>scripts</CODE> - 列出所有已加载的脚本</LI>
  <LI><CODE>version</CODE> - 显示 V8 引擎的版本号</LI></UL></DIV>
<H2>高级用法<SPAN><A class="mark" id="debugger_advanced_usage" href="http://nodejs.cn/api/debugger.html#debugger_advanced_usage">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_advanced_usage">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/advanced_usage.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<P>启用和访问调试器的另一种方式，是启动 Node.js 时带上 <CODE>--debug</CODE> 命令行标志，或向一个已存在的 Node.js 
进程发送 <CODE>SIGUSR1</CODE> 信号。</P>
<P>一旦一个进程以这种方式被设为调试模式，它就可以被 Node.js 调试器使用，通过连接到正在运行的进程的 <CODE>pid</CODE> 
或通过正在监听的调试器的 URI 引用：</P>
<UL>
  <LI><CODE>node debug -p &lt;pid&gt;</CODE> - 通过 <CODE>pid</CODE> 连接进程</LI>
  <LI><CODE>node debug &lt;URI&gt;</CODE> - 通过 URI 连接进程，如 localhost:5858</LI></UL>
<H2>Node.js 的 V8 检查器集合<SPAN><A class="mark" id="debugger_v8_inspector_integration_for_node_js" 
href="http://nodejs.cn/api/debugger.html#debugger_v8_inspector_integration_for_node_js">#</A></SPAN></H2>
<P style="font-size: 12px; margin-top: -1em;"><A href="http://nodejs.cn/api/en/debugger.html#debugger_v8_inspector_integration_for_node_js">查看英文版</A> 
/ <A href="https://github.com/nodejscn/node-api-cn/edit/master/debugger/v8_inspector_integration_for_node_js.md" 
target="_blank" rel="nofollow">参与翻译</A></P>
<P><STRONG>注意：这是一个试验的特性。</STRONG></P>
<P>V8 的检查器集成可以附加 Chrome 的开发者工具到 Node.js 实例以用于调试和性能分析。</P>
<P>当启动一个 Node.js 应用时，V8 检查器可以通过传入 <CODE>--inspect</CODE> 标志启用。
 也可以通过该标志提供一个自定义的端口，如 <CODE>--inspect=9222</CODE> 会在 9222 端口接受开发者工具连接。</P>
<P>要想在应用代码的第一行断开，可以在除 <CODE>--inspect</CODE> 之外再提供 <CODE>--debug-brk</CODE> 
标志。</P>
<PRE><CODE class="lang-txt">$ node --inspect index.js
Debugger listening on port 9229.
Warning: This is an experimental feature and could change at any time.
To start debugging, open the following URL in Chrome:
    chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node
</CODE></PRE></DIV></DIV></DIV><!-- 搜索弹窗 --> 
  
<DIV id="modal_search_bg"></DIV>
<DIV 
id="modal_search"><INPUT id="modal_search_input" placeholder="API 快速搜索" value=""> 
    
<DIV id="modal_search_result"></DIV></DIV><!-- js -->   <!--[if lt IE 10]><script src="/static/lib/placeholders.js?20170426"></script><![endif]--> 
  
<SCRIPT src="debugger%20%20Node_js%20API%20文档_files/api.js"></SCRIPT>
 </BODY></HTML>
