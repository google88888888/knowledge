https://zh-hans.reactjs.org/docs/getting-started.html


https://zh-hans.reactjs.org/docs/composition-vs-inheritance.html
React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。


（一）Hello World
（二）JSX 简介
（1）使用{}嵌入单行表达式
（2）引号将属性值指定为字符串字面量
（3）使用camelCase（小驼峰命名）定义属性名，不使用html属性名的命名约定。
（4）类样式class变成了className
（5）如果标签children没有内容，可以使用 /> 闭合标签
（6）插入内容在渲染之前会被转换成了字符串。可以防止 XSS（cross-site-scripting, 跨站脚本）攻击
（7）babel把jsx转译成React.createElement()函数调用，创建 “React 元素”对象。构建dom保持更新

（三）元素渲染
（1）<div id="root"></div>根dom节点内的内容由React DOM管理，渲染用ReactDOM.render(element, document.getElementById('root'));

（四）组件 & Props
（1）分为函数组件和类组件
（2）原生DOM标签名称以小写字母开头，组件名称以大写字母开头
（3）props不能修改

（五）State & 生命周期
（1）可以向类组件实例中添加不参与数据流的自定义类组件实例属性
  componentDidMount() {
    this.timerID = setInterval(
      () => this.doSomething(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

（2）使用
		this.setState({
			key：value,
		});
	更新state
	
（3）性能考虑，React可能把多个setState合并成一个调用

（4）解决this.props和this.state可能异步更新问题：
this.setState((state, props) => ({
  key: state.key + props.key
}));


（六）事件处理
（1）原生DOM事件与React事件区别
（1.1）原生DOM事件名称纯小写，React事件名称小驼峰式（camelCase）
（1.2）原生DOM事件处理函数传入字符串"方法名()"，React事件处理函数传入函数
（1.3）原生DOM事件阻止默认行为可以使用返回false的方式，React事件阻止默认行为不能使用返回false的方式，必须使用e.preventDefault();

（2）js中，class方法默认不会绑定this，绑定方法有：
（2.1） onClick={this.方法名.bind(this)}  
        方法名(){
		}
（2.2） onClick={this.方法名}          class fields 语法
        方法名= () => {
		}
（2.3） onClick={() => this.方法名()}  缺点：每次渲染都会创建不同的回调函数
        方法名(){
		}
（3）传递参数
（3.1） onClick={this.方法名.bind(this,...param)}  
        方法名(...param,e){
		}
（3.2） onClick={this.方法名}          
        方法名= (e) => {
		}
（3.3） onClick={(e) => this.方法名(...param,e)}  
        方法名(...param,e){
		}

（七）条件渲染
（1）使用if
（2）
false && expression返回 false
true  && expression返回 expression
（3）condition ? expressionTrue : expressionFalse
（4）render方法return null; 不进行渲染


（八）列表 & Key
（1）数组中项默认用索引做key，应用唯一的字符串做key

（九）表单
（1）受控组件：表单内部state与组件state相结合
      <form onSubmit={this.onSubmit}>
        <input    value={this.state.value} onChange={this.onChange} type="text"   />
        <input type="submit" value="提交" />
      </form>

      其他：
		<textarea value={this.state.value} onChange={this.onChange}    />
        
		<select   value={this.state.value} onChange={this.onChange} >
            <option value="a">a</option>
			<option value="b">b</option>
        </select>

        <select   value={this.state.value} onChange={this.handleChange} multiple={true} >
            <option value="a">a</option>
			<option value="b">b</option>
        </select>
		this.state.value是['a', 'b']形式

（2）非受控组件：表单内部state不与组件state相结合
        <input type="file" />  因其value只读

（十）状态提升：将多个组件中需要共享的state向上移动到它们的最近共同父组件中，实现共享state

（十一）组合vs继承





























































































